{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\quiz app\\\\src\\\\views\\\\QuizView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\n// Firebase imports removed for local/demo mode\n// import { db, appId } from '../firebase/config';\n// import { doc, setDoc, getDoc, collection, getDocs, updateDoc } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuizView = ({\n  quiz,\n  userId,\n  quizCode,\n  currentQuestionIndex,\n  selectedAnswer,\n  setSelectedAnswer,\n  setCurrentQuiz,\n  setView,\n  setQuizResults,\n  setCurrentQuestionIndex,\n  setLocalQuizzes,\n  localQuizzes,\n  playerName,\n  userAnswers,\n  setUserAnswers\n}) => {\n  _s();\n  const isHost = (quiz === null || quiz === void 0 ? void 0 : quiz.createdBy) === userId;\n  useEffect(() => {\n    setSelectedAnswer(null);\n  }, [currentQuestionIndex, setSelectedAnswer]);\n  if (!quiz || quiz.status === 'lobby' || !quiz.questions || !quiz.questions[currentQuestionIndex]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-2xl\",\n      children: \"Waiting for the quiz to start...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  }\n  const question = quiz.questions[currentQuestionIndex];\n  const handleAnswerSubmit = optionIndex => {\n    setSelectedAnswer(optionIndex);\n\n    // Store the user's answer for score calculation\n    setUserAnswers(prev => ({\n      ...prev,\n      [currentQuestionIndex]: optionIndex\n    }));\n    console.log(\"Answer submitted:\", optionIndex, \"for question\", currentQuestionIndex + 1);\n\n    // All quiz modes now work locally - no Firebase operations needed\n  };\n  const handleNextQuestion = () => {\n    try {\n      console.log(\"=== BUTTON CLICKED - DEBUG INFO ===\");\n      console.log(\"Button clicked! Function parameters check:\");\n      console.log(\"setQuizResults:\", typeof setQuizResults);\n      console.log(\"setView:\", typeof setView);\n      console.log(\"setCurrentQuiz:\", typeof setCurrentQuiz);\n      console.log(\"setCurrentQuestionIndex:\", typeof setCurrentQuestionIndex);\n      console.log(\"userAnswers:\", userAnswers);\n      console.log(\"quiz:\", quiz);\n      console.log(\"=====================================\");\n      const nextIndex = currentQuestionIndex + 1;\n      console.log(\"handleNextQuestion called\", {\n        nextIndex,\n        totalQuestions: quiz.questions.length,\n        quizCode,\n        isDemo: quizCode === 'DEMO' || quizCode === 'TEST',\n        isLocal: localQuizzes && localQuizzes[quizCode],\n        isHost,\n        userId: userId,\n        createdBy: quiz === null || quiz === void 0 ? void 0 : quiz.createdBy\n      });\n\n      // Handle demo mode and local quizzes\n      if (quizCode === 'DEMO' || quizCode === 'TEST' || localQuizzes && localQuizzes[quizCode]) {\n        console.log(\"Processing demo/local quiz logic...\");\n        if (nextIndex < quiz.questions.length) {\n          console.log(\"Moving to next question:\", nextIndex + 1);\n          // Update the quiz state locally for demo mode and local quizzes\n          const updatedQuiz = {\n            ...quiz,\n            currentQuestionIndex: nextIndex\n          };\n          setCurrentQuiz(updatedQuiz);\n          setCurrentQuestionIndex(nextIndex);\n          setSelectedAnswer(null);\n\n          // If it's a local quiz, update the stored data too\n          if (localQuizzes && localQuizzes[quizCode]) {\n            setLocalQuizzes(prevQuizzes => ({\n              ...prevQuizzes,\n              [quizCode]: updatedQuiz\n            }));\n          }\n          console.log(\"Local/Demo mode: Moving to question\", nextIndex + 1);\n        } else {\n          console.log(\"Quiz finished, calculating results\");\n          // Calculate real scores based on user answers\n          let userScore = 0;\n          quiz.questions.forEach((question, index) => {\n            if (question.correctAnswer !== undefined && userAnswers[index] === question.correctAnswer) {\n              userScore++;\n            }\n          });\n          console.log(\"User score:\", userScore, \"out of\", quiz.questions.length);\n          const realResults = {\n            scores: [{\n              name: playerName || \"You\",\n              score: userScore\n            }, {\n              name: \"Demo Player 1\",\n              score: Math.floor(Math.random() * quiz.questions.length)\n            }, {\n              name: \"Demo Player 2\",\n              score: Math.floor(Math.random() * quiz.questions.length)\n            }],\n            totalQuestions: quiz.questions.length\n          };\n          realResults.scores.sort((a, b) => b.score - a.score);\n          console.log(\"Setting quiz results:\", realResults);\n          setQuizResults(realResults);\n          console.log(\"Changing view to results...\");\n          setView('results');\n          console.log(\"Local/Demo mode: Quiz finished, showing results with real scores\");\n        }\n        return;\n      }\n      console.log(\"Not a demo/local quiz - would use Firebase logic (disabled)\");\n    } catch (error) {\n      console.error(\"Error in handleNextQuestion:\", error);\n      alert(\"Error in handleNextQuestion: \" + error.message);\n    }\n  };\n\n  // Firebase function disabled for local/demo mode\n  /*\r\n  const calculateAndShowResults = async () => {\r\n      const privateQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/users/${quiz.createdBy}/quizzes/${quizCode}`));\r\n      if (!privateQuizDoc.exists()) {\r\n          console.error(\"Could not find original quiz data to calculate results.\");\r\n          return;\r\n      }\r\n      const correctAnswers = privateQuizDoc.data().questions.map(q => q.correctAnswer);\r\n        const answersSnapshot = await getDocs(collection(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}/answers`));\r\n      const submittedAnswers = answersSnapshot.docs.map(d => d.data());\r\n        const publicQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`));\r\n      const players = publicQuizDoc.data().players;\r\n        const scores = players.map(player => {\r\n          const playerScore = submittedAnswers\r\n              .filter(ans => ans.userId === player.id && correctAnswers[ans.questionIndex] === ans.answer)\r\n              .length;\r\n          return { name: player.name, score: playerScore };\r\n      });\r\n        scores.sort((a, b) => b.score - a.score);\r\n        await updateDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`), {\r\n          status: 'finished',\r\n          results: { scores, totalQuestions: quiz.questions.length }\r\n      });\r\n  };\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-3xl mx-auto text-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-800 p-8 rounded-lg shadow-2xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-cyan-400 font-bold\",\n          children: quiz.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bg-gray-700 text-white text-sm font-semibold px-3 py-1 rounded-full\",\n          children: [\"Question \", currentQuestionIndex + 1, \"/\", quiz.questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-3xl font-bold my-6 min-h-[80px]\",\n        children: question.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n        children: question.options.map((option, index) => {\n          const isSelected = selectedAnswer === index;\n          let buttonClass = \"bg-gray-700 hover:bg-gray-600\";\n          if (isSelected) {\n            buttonClass = \"bg-green-500 hover:bg-green-600\"; // Changed to green and allow hover\n          }\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAnswerSubmit(index),\n            className: `w-full text-left p-4 rounded-lg text-lg transition-all duration-200 ${buttonClass}`,\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), (() => {\n        const showButton = isHost || quizCode === 'DEMO' || quizCode === 'TEST' || localQuizzes && localQuizzes[quizCode];\n        console.log(\"Button visibility debug:\", {\n          showButton,\n          isHost,\n          quizCode,\n          isDemoOrTest: quizCode === 'DEMO' || quizCode === 'TEST',\n          hasLocalQuiz: localQuizzes && localQuizzes[quizCode],\n          localQuizzes\n        });\n        return showButton;\n      })() && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-8\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            console.log(\"=== FINISH QUIZ - REAL CALCULATION ===\");\n            console.log(\"Current quiz:\", quiz);\n            console.log(\"User answers:\", userAnswers);\n            console.log(\"Current question index:\", currentQuestionIndex);\n            console.log(\"Total questions:\", quiz.questions.length);\n\n            // Calculate the user's real score\n            let userScore = 0;\n            quiz.questions.forEach((question, index) => {\n              console.log(`Question ${index + 1}:`, {\n                question: question.text,\n                correctAnswer: question.correctAnswer,\n                userAnswer: userAnswers[index],\n                isCorrect: question.correctAnswer !== undefined && userAnswers[index] === question.correctAnswer\n              });\n              if (question.correctAnswer !== undefined && userAnswers[index] === question.correctAnswer) {\n                userScore++;\n              }\n            });\n            console.log(\"Final user score:\", userScore, \"out of\", quiz.questions.length);\n\n            // Create results with real data\n            const realResults = {\n              scores: [{\n                name: playerName || \"You\",\n                score: userScore\n              }, {\n                name: \"Demo Player 1\",\n                score: Math.floor(Math.random() * (quiz.questions.length + 1))\n              }, {\n                name: \"Demo Player 2\",\n                score: Math.floor(Math.random() * (quiz.questions.length + 1))\n              }],\n              totalQuestions: quiz.questions.length\n            };\n\n            // Sort by score (highest first)\n            realResults.scores.sort((a, b) => b.score - a.score);\n            console.log(\"Final results:\", realResults);\n            setQuizResults(realResults);\n            console.log(\"Changing view to results...\");\n            setView('results');\n            console.log(\"Quiz finished successfully!\");\n          },\n          className: \"bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-8 rounded-lg text-lg transition-colors\",\n          children: currentQuestionIndex === quiz.questions.length - 1 ? 'Finish & Show Results' : 'Next Question'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this), !isHost && selectedAnswer !== null && !(quizCode === 'DEMO' || quizCode === 'TEST' || localQuizzes && localQuizzes[quizCode]) && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-8 text-gray-400\",\n        children: \"Your answer is submitted. Waiting for the host to proceed...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizView, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = QuizView;\nvar _c;\n$RefreshReg$(_c, \"QuizView\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","QuizView","quiz","userId","quizCode","currentQuestionIndex","selectedAnswer","setSelectedAnswer","setCurrentQuiz","setView","setQuizResults","setCurrentQuestionIndex","setLocalQuizzes","localQuizzes","playerName","userAnswers","setUserAnswers","_s","isHost","createdBy","status","questions","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question","handleAnswerSubmit","optionIndex","prev","console","log","handleNextQuestion","nextIndex","totalQuestions","length","isDemo","isLocal","updatedQuiz","prevQuizzes","userScore","forEach","index","correctAnswer","undefined","realResults","scores","name","score","Math","floor","random","sort","a","b","error","alert","message","title","text","options","map","option","isSelected","buttonClass","onClick","showButton","isDemoOrTest","hasLocalQuiz","userAnswer","isCorrect","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/quiz app/src/views/QuizView.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n// Firebase imports removed for local/demo mode\r\n// import { db, appId } from '../firebase/config';\r\n// import { doc, setDoc, getDoc, collection, getDocs, updateDoc } from 'firebase/firestore';\r\n\r\nexport const QuizView = ({ quiz, userId, quizCode, currentQuestionIndex, selectedAnswer, setSelectedAnswer, setCurrentQuiz, setView, setQuizResults, setCurrentQuestionIndex, setLocalQuizzes, localQuizzes, playerName, userAnswers, setUserAnswers }) => {\r\n    const isHost = quiz?.createdBy === userId;\r\n\r\n    useEffect(() => {\r\n        setSelectedAnswer(null);\r\n    }, [currentQuestionIndex, setSelectedAnswer]);\r\n\r\n    if (!quiz || quiz.status === 'lobby' || !quiz.questions || !quiz.questions[currentQuestionIndex]) {\r\n        return <div className=\"text-center text-2xl\">Waiting for the quiz to start...</div>;\r\n    }\r\n    \r\n    const question = quiz.questions[currentQuestionIndex];\r\n\r\n    const handleAnswerSubmit = (optionIndex) => {\r\n        setSelectedAnswer(optionIndex);\r\n        \r\n        // Store the user's answer for score calculation\r\n        setUserAnswers(prev => ({\r\n            ...prev,\r\n            [currentQuestionIndex]: optionIndex\r\n        }));\r\n        \r\n        console.log(\"Answer submitted:\", optionIndex, \"for question\", currentQuestionIndex + 1);\r\n        \r\n        // All quiz modes now work locally - no Firebase operations needed\r\n    };\r\n\r\n    const handleNextQuestion = () => {\r\n        try {\r\n            console.log(\"=== BUTTON CLICKED - DEBUG INFO ===\");\r\n            console.log(\"Button clicked! Function parameters check:\");\r\n            console.log(\"setQuizResults:\", typeof setQuizResults);\r\n            console.log(\"setView:\", typeof setView);\r\n            console.log(\"setCurrentQuiz:\", typeof setCurrentQuiz);\r\n            console.log(\"setCurrentQuestionIndex:\", typeof setCurrentQuestionIndex);\r\n            console.log(\"userAnswers:\", userAnswers);\r\n            console.log(\"quiz:\", quiz);\r\n            console.log(\"=====================================\");\r\n            \r\n            const nextIndex = currentQuestionIndex + 1;\r\n            \r\n            console.log(\"handleNextQuestion called\", {\r\n                nextIndex,\r\n                totalQuestions: quiz.questions.length,\r\n                quizCode,\r\n                isDemo: quizCode === 'DEMO' || quizCode === 'TEST',\r\n                isLocal: localQuizzes && localQuizzes[quizCode],\r\n                isHost,\r\n                userId: userId,\r\n                createdBy: quiz?.createdBy\r\n            });\r\n            \r\n            // Handle demo mode and local quizzes\r\n            if (quizCode === 'DEMO' || quizCode === 'TEST' || (localQuizzes && localQuizzes[quizCode])) {\r\n                console.log(\"Processing demo/local quiz logic...\");\r\n                \r\n                if (nextIndex < quiz.questions.length) {\r\n                    console.log(\"Moving to next question:\", nextIndex + 1);\r\n                    // Update the quiz state locally for demo mode and local quizzes\r\n                    const updatedQuiz = { ...quiz, currentQuestionIndex: nextIndex };\r\n                    setCurrentQuiz(updatedQuiz);\r\n                    setCurrentQuestionIndex(nextIndex);\r\n                    setSelectedAnswer(null);\r\n                    \r\n                    // If it's a local quiz, update the stored data too\r\n                    if (localQuizzes && localQuizzes[quizCode]) {\r\n                        setLocalQuizzes(prevQuizzes => ({\r\n                            ...prevQuizzes,\r\n                            [quizCode]: updatedQuiz\r\n                        }));\r\n                    }\r\n                    \r\n                    console.log(\"Local/Demo mode: Moving to question\", nextIndex + 1);\r\n                } else {\r\n                    console.log(\"Quiz finished, calculating results\");\r\n                    // Calculate real scores based on user answers\r\n                    let userScore = 0;\r\n                    quiz.questions.forEach((question, index) => {\r\n                        if (question.correctAnswer !== undefined && userAnswers[index] === question.correctAnswer) {\r\n                            userScore++;\r\n                        }\r\n                    });\r\n                    \r\n                    console.log(\"User score:\", userScore, \"out of\", quiz.questions.length);\r\n                    \r\n                    const realResults = {\r\n                        scores: [\r\n                            { name: playerName || \"You\", score: userScore },\r\n                            { name: \"Demo Player 1\", score: Math.floor(Math.random() * quiz.questions.length) },\r\n                            { name: \"Demo Player 2\", score: Math.floor(Math.random() * quiz.questions.length) }\r\n                        ],\r\n                        totalQuestions: quiz.questions.length\r\n                    };\r\n                    realResults.scores.sort((a, b) => b.score - a.score);\r\n                    \r\n                    console.log(\"Setting quiz results:\", realResults);\r\n                    setQuizResults(realResults);\r\n                    \r\n                    console.log(\"Changing view to results...\");\r\n                    setView('results');\r\n                    \r\n                    console.log(\"Local/Demo mode: Quiz finished, showing results with real scores\");\r\n                }\r\n                return;\r\n            }\r\n            \r\n            console.log(\"Not a demo/local quiz - would use Firebase logic (disabled)\");\r\n        } catch (error) {\r\n            console.error(\"Error in handleNextQuestion:\", error);\r\n            alert(\"Error in handleNextQuestion: \" + error.message);\r\n        }\r\n    };\r\n    \r\n    // Firebase function disabled for local/demo mode\r\n    /*\r\n    const calculateAndShowResults = async () => {\r\n        const privateQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/users/${quiz.createdBy}/quizzes/${quizCode}`));\r\n        if (!privateQuizDoc.exists()) {\r\n            console.error(\"Could not find original quiz data to calculate results.\");\r\n            return;\r\n        }\r\n        const correctAnswers = privateQuizDoc.data().questions.map(q => q.correctAnswer);\r\n\r\n        const answersSnapshot = await getDocs(collection(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}/answers`));\r\n        const submittedAnswers = answersSnapshot.docs.map(d => d.data());\r\n\r\n        const publicQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`));\r\n        const players = publicQuizDoc.data().players;\r\n\r\n        const scores = players.map(player => {\r\n            const playerScore = submittedAnswers\r\n                .filter(ans => ans.userId === player.id && correctAnswers[ans.questionIndex] === ans.answer)\r\n                .length;\r\n            return { name: player.name, score: playerScore };\r\n        });\r\n\r\n        scores.sort((a, b) => b.score - a.score);\r\n\r\n        await updateDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`), {\r\n            status: 'finished',\r\n            results: { scores, totalQuestions: quiz.questions.length }\r\n        });\r\n    };\r\n    */\r\n\r\n    return (\r\n        <div className=\"w-full max-w-3xl mx-auto text-center\">\r\n            <div className=\"bg-gray-800 p-8 rounded-lg shadow-2xl\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                    <span className=\"text-cyan-400 font-bold\">{quiz.title}</span>\r\n                    <span className=\"bg-gray-700 text-white text-sm font-semibold px-3 py-1 rounded-full\">Question {currentQuestionIndex + 1}/{quiz.questions.length}</span>\r\n                </div>\r\n                <h2 className=\"text-3xl font-bold my-6 min-h-[80px]\">{question.text}</h2>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    {question.options.map((option, index) => {\r\n                        const isSelected = selectedAnswer === index;\r\n                        \r\n                        let buttonClass = \"bg-gray-700 hover:bg-gray-600\";\r\n                        if (isSelected) {\r\n                            buttonClass = \"bg-green-500 hover:bg-green-600\"; // Changed to green and allow hover\r\n                        }\r\n\r\n                        return (\r\n                            <button\r\n                                key={index}\r\n                                onClick={() => handleAnswerSubmit(index)}\r\n                                className={`w-full text-left p-4 rounded-lg text-lg transition-all duration-200 ${buttonClass}`}\r\n                            >\r\n                                {option}\r\n                            </button>\r\n                        );\r\n                    })}\r\n                </div>\r\n                {/* For demo/local quizzes, allow anyone to proceed. For real quizzes, only host controls */}\r\n                {(() => {\r\n                    const showButton = isHost || quizCode === 'DEMO' || quizCode === 'TEST' || (localQuizzes && localQuizzes[quizCode]);\r\n                    console.log(\"Button visibility debug:\", {\r\n                        showButton,\r\n                        isHost,\r\n                        quizCode,\r\n                        isDemoOrTest: quizCode === 'DEMO' || quizCode === 'TEST',\r\n                        hasLocalQuiz: localQuizzes && localQuizzes[quizCode],\r\n                        localQuizzes\r\n                    });\r\n                    return showButton;\r\n                })() && (\r\n                    <div className=\"mt-8\">\r\n                        <button \r\n                            onClick={() => {\r\n                                console.log(\"=== FINISH QUIZ - REAL CALCULATION ===\");\r\n                                console.log(\"Current quiz:\", quiz);\r\n                                console.log(\"User answers:\", userAnswers);\r\n                                console.log(\"Current question index:\", currentQuestionIndex);\r\n                                console.log(\"Total questions:\", quiz.questions.length);\r\n                                \r\n                                // Calculate the user's real score\r\n                                let userScore = 0;\r\n                                quiz.questions.forEach((question, index) => {\r\n                                    console.log(`Question ${index + 1}:`, {\r\n                                        question: question.text,\r\n                                        correctAnswer: question.correctAnswer,\r\n                                        userAnswer: userAnswers[index],\r\n                                        isCorrect: question.correctAnswer !== undefined && userAnswers[index] === question.correctAnswer\r\n                                    });\r\n                                    \r\n                                    if (question.correctAnswer !== undefined && userAnswers[index] === question.correctAnswer) {\r\n                                        userScore++;\r\n                                    }\r\n                                });\r\n                                \r\n                                console.log(\"Final user score:\", userScore, \"out of\", quiz.questions.length);\r\n                                \r\n                                // Create results with real data\r\n                                const realResults = {\r\n                                    scores: [\r\n                                        { name: playerName || \"You\", score: userScore },\r\n                                        { name: \"Demo Player 1\", score: Math.floor(Math.random() * (quiz.questions.length + 1)) },\r\n                                        { name: \"Demo Player 2\", score: Math.floor(Math.random() * (quiz.questions.length + 1)) }\r\n                                    ],\r\n                                    totalQuestions: quiz.questions.length\r\n                                };\r\n                                \r\n                                // Sort by score (highest first)\r\n                                realResults.scores.sort((a, b) => b.score - a.score);\r\n                                \r\n                                console.log(\"Final results:\", realResults);\r\n                                setQuizResults(realResults);\r\n                                \r\n                                console.log(\"Changing view to results...\");\r\n                                setView('results');\r\n                                \r\n                                console.log(\"Quiz finished successfully!\");\r\n                            }} \r\n                            className=\"bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-8 rounded-lg text-lg transition-colors\"\r\n                        >\r\n                            {currentQuestionIndex === quiz.questions.length - 1 ? 'Finish & Show Results' : 'Next Question'}\r\n                        </button>\r\n                    </div>\r\n                )}\r\n                {!isHost && selectedAnswer !== null && !(quizCode === 'DEMO' || quizCode === 'TEST' || (localQuizzes && localQuizzes[quizCode])) && (\r\n                    <p className=\"mt-8 text-gray-400\">Your answer is submitted. Waiting for the host to proceed...</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}