{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\quiz app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// import { auth, db, appId } from './firebase/config';\n// import { onAuthStateChanged, signInAnonymously } from 'firebase/auth';\n// import { doc, onSnapshot } from 'firebase/firestore';\n// import { db, appId } from './firebase/config';\n\n// Import Views\nimport { HomeView } from './views/HomeView';\nimport { CreateQuizView } from './views/CreateQuizView';\nimport { AttemptQuizView } from './views/AttemptQuizView';\nimport { LobbyView } from './views/LobbyView';\nimport { QuizView } from './views/QuizView';\nimport { ResultsView } from './views/ResultsView';\nimport { QuizLibrary } from './views/QuizLibrary';\n\n// Import Common Components\nimport { LoadingSpinner } from './components/common/LoadingSpinner';\n\n// Import Database utilities\nimport { getUserQuizzes, saveQuiz } from './utils/quizDatabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [view, setView] = useState('home');\n  const [userId, setUserId] = useState(null);\n  const [isAuthReady, setIsAuthReady] = useState(false);\n  const [quizCode, setQuizCode] = useState('');\n  const [createdQuizCode, setCreatedQuizCode] = useState(null);\n  const [currentQuiz, setCurrentQuiz] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [error, setError] = useState('');\n  const [myQuizzes, setMyQuizzes] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [quizResults, setQuizResults] = useState(null);\n  const [localQuizzes, setLocalQuizzes] = useState({}); // Store created quizzes locally\n  const [playerName, setPlayerName] = useState(''); // Store player name for quizzes\n  const [userAnswers, setUserAnswers] = useState({}); // Store user's answers for score calculation\n  const [savedQuizzes, setSavedQuizzes] = useState({}); // Store permanently saved quizzes\n\n  // --- Authentication Effect ---\n  useEffect(() => {\n    const initializeApp = async () => {\n      // For demo mode, we'll use a persistent user ID stored in localStorage\n      console.log(\"Setting up demo authentication\");\n      let demoUserId = localStorage.getItem('quiz_app_demo_user_id');\n      if (!demoUserId) {\n        demoUserId = `demo-user-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`;\n        localStorage.setItem('quiz_app_demo_user_id', demoUserId);\n        console.log(\"Created new demo user ID:\", demoUserId);\n      } else {\n        console.log(\"Using existing demo user ID:\", demoUserId);\n      }\n      setUserId(demoUserId);\n      setIsAuthReady(true);\n\n      // Load saved quizzes from database\n      await loadSavedQuizzes(demoUserId);\n    };\n    initializeApp();\n\n    // Commenting out Firebase auth for demo mode\n    /*\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n        if (user) {\r\n            setUserId(user.uid);\r\n        } else {\r\n            try {\r\n                // For demo purposes, we'll use anonymous authentication\r\n                await signInAnonymously(auth);\r\n            } catch (error) {\r\n                console.error(\"Authentication failed:\", error);\r\n                setError(\"Could not connect to the service. Please refresh.\");\r\n            }\r\n        }\r\n        setIsAuthReady(true);\r\n    });\r\n    return () => unsubscribe();\r\n    */\n  }, []);\n\n  // Load saved quizzes from database\n  const loadSavedQuizzes = async userId => {\n    if (userId) {\n      console.log(\"Loading saved quizzes for user:\", userId);\n      try {\n        const quizzes = await getUserQuizzes(userId);\n        console.log(\"Loaded quizzes:\", quizzes);\n        setSavedQuizzes(quizzes || {});\n        setMyQuizzes(Object.values(quizzes || {}));\n        console.log(\"Set myQuizzes to:\", Object.values(quizzes || {}));\n      } catch (error) {\n        console.error(\"Error loading saved quizzes:\", error);\n        setSavedQuizzes({});\n        setMyQuizzes([]);\n      }\n    }\n  };\n\n  // Save quiz to database\n  const saveQuizToDatabase = async (userId, quizId, quizData) => {\n    const success = await saveQuiz(userId, quizId, quizData);\n    if (success) {\n      await loadSavedQuizzes(userId);\n      console.log('Quiz saved to permanent database');\n    }\n    return success;\n  };\n\n  // --- Fetch User's Quizzes Effect ---\n  // Commented out since we're using local storage instead of Firebase\n  /*\r\n  useEffect(() => {\r\n      if (!isAuthReady || !userId) return;\r\n        const quizzesCollectionPath = `/artifacts/${appId}/users/${userId}/quizzes`;\r\n      const q = query(collection(db, quizzesCollectionPath));\r\n      \r\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n          const userQuizzes = [];\r\n          querySnapshot.forEach((doc) => {\r\n              userQuizzes.push({ id: doc.id, ...doc.data() });\r\n          });\r\n          setMyQuizzes(userQuizzes);\r\n      }, (err) => {\r\n          console.error(\"Error fetching user quizzes:\", err);\r\n          setError(\"Could not load your quizzes.\");\r\n      });\r\n        return () => unsubscribe();\r\n  }, [isAuthReady, userId]);\r\n  */\n\n  // --- Lobby Snapshot Effect ---\n  useEffect(() => {\n    if (view !== 'lobby' || !createdQuizCode) return;\n\n    // Handle locally created quizzes\n    if (localQuizzes && localQuizzes[createdQuizCode]) {\n      console.log(\"Loading local quiz for lobby:\", createdQuizCode);\n      const localQuiz = localQuizzes[createdQuizCode];\n      setCurrentQuiz(localQuiz);\n      setPlayers(localQuiz.players || []);\n      return;\n    }\n\n    // Handle saved quizzes from database\n    if (savedQuizzes && savedQuizzes[createdQuizCode]) {\n      console.log(\"Loading saved quiz for lobby:\", createdQuizCode);\n      const savedQuiz = savedQuizzes[createdQuizCode];\n      setCurrentQuiz(savedQuiz);\n      setPlayers(savedQuiz.players || []);\n      return;\n    }\n\n    // Firebase fallback disabled for local/demo mode\n    /*\r\n    const lobbyDocPath = `/artifacts/${appId}/public/data/quizzes/${createdQuizCode}`;\r\n    const unsubscribe = onSnapshot(doc(db, lobbyDocPath), (docSnap) => {\r\n        if (docSnap.exists()) {\r\n            const quizData = docSnap.data();\r\n            setCurrentQuiz(quizData);\r\n            setPlayers(quizData.players || []);\r\n        }\r\n    });\r\n      return () => unsubscribe();\r\n    */\n  }, [view, createdQuizCode, localQuizzes, savedQuizzes]);\n\n  // --- Quiz Attempt Snapshot Effect ---\n  useEffect(() => {\n    if (view !== 'quiz' || !quizCode) return;\n\n    // First, check if this is a locally created quiz\n    if (localQuizzes && localQuizzes[quizCode]) {\n      console.log(\"Loading local quiz:\", quizCode);\n      const localQuiz = {\n        ...localQuizzes[quizCode]\n      };\n      // Set status to active so the quiz can start\n      localQuiz.status = 'active';\n      setCurrentQuiz(localQuiz);\n      setCurrentQuestionIndex(localQuiz.currentQuestionIndex || 0);\n      setUserAnswers({}); // Reset user answers for new quiz\n      return;\n    }\n\n    // Check if this is a saved quiz from database\n    if (savedQuizzes && savedQuizzes[quizCode]) {\n      console.log(\"Loading saved quiz:\", quizCode);\n      const savedQuiz = {\n        ...savedQuizzes[quizCode]\n      };\n      // Set status to active so the quiz can start\n      savedQuiz.status = 'active';\n      setCurrentQuiz(savedQuiz);\n      setCurrentQuestionIndex(savedQuiz.currentQuestionIndex || 0);\n      setUserAnswers({}); // Reset user answers for new quiz\n      return;\n    }\n\n    // Handle demo quizzes\n    if (quizCode === 'DEMO' || quizCode === 'TEST') {\n      console.log(\"Setting up demo quiz data\");\n      setUserAnswers({}); // Reset user answers for new quiz\n      const demoQuiz = {\n        title: \"Demo Quiz\",\n        questions: [{\n          text: \"What is the capital of France?\",\n          options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\n          correctAnswer: 2 // Paris is the correct answer (index 2)\n        }, {\n          text: \"Which planet is known as the Red Planet?\",\n          options: [\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"],\n          correctAnswer: 1 // Mars is the correct answer (index 1)\n        }, {\n          text: \"What is 2 + 2?\",\n          options: [\"3\", \"4\", \"5\", \"6\"],\n          correctAnswer: 1 // 4 is the correct answer (index 1)\n        }],\n        status: 'active',\n        // Set to active so the quiz can start\n        currentQuestionIndex: 0,\n        createdBy: userId,\n        players: [{\n          id: userId,\n          name: playerName || \"You\"\n        }, {\n          id: \"demo-player-1\",\n          name: \"Demo Player 1\"\n        }, {\n          id: \"demo-player-2\",\n          name: \"Demo Player 2\"\n        }]\n      };\n      setCurrentQuiz(demoQuiz);\n      setCurrentQuestionIndex(0);\n      return;\n    }\n\n    // Firebase fallback disabled for local/demo mode\n    /*\r\n    const quizDocPath = `/artifacts/${appId}/public/data/quizzes/${quizCode}`;\r\n    const unsubscribe = onSnapshot(doc(db, quizDocPath), (docSnap) => {\r\n        if (docSnap.exists()) {\r\n            const quizData = docSnap.data();\r\n            setCurrentQuiz(quizData);\r\n            setCurrentQuestionIndex(quizData.currentQuestionIndex || 0);\r\n            if (quizData.status === 'finished') {\r\n                setQuizResults(quizData.results);\r\n                setView('results');\r\n            }\r\n        } else {\r\n            setError(\"This quiz does not exist or has been closed.\");\r\n            setView('attempt');\r\n        }\r\n    });\r\n      return () => unsubscribe();\r\n    */\n  }, [view, quizCode, userId, localQuizzes, playerName, savedQuizzes]);\n\n  // --- Component Rendering Logic (Router) ---\n  const renderView = () => {\n    console.log(\"Current view:\", view);\n    console.log(\"Auth ready:\", isAuthReady);\n    console.log(\"User ID:\", userId);\n    if (!isAuthReady) {\n      return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 20\n      }, this);\n    }\n    switch (view) {\n      case 'create':\n        console.log(\"Rendering CreateQuizView\");\n        return /*#__PURE__*/_jsxDEV(CreateQuizView, {\n          setView: setView,\n          userId: userId,\n          setCreatedQuizCode: setCreatedQuizCode,\n          setLocalQuizzes: setLocalQuizzes,\n          saveQuizToDatabase: saveQuizToDatabase\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 24\n        }, this);\n      case 'attempt':\n        return /*#__PURE__*/_jsxDEV(AttemptQuizView, {\n          setView: setView,\n          setQuizCode: setQuizCode,\n          setError: setError,\n          error: error,\n          userId: userId,\n          localQuizzes: localQuizzes,\n          savedQuizzes: savedQuizzes,\n          setPlayerName: setPlayerName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 24\n        }, this);\n      case 'lobby':\n        console.log(\"Rendering LobbyView with quizCode:\", createdQuizCode);\n        return /*#__PURE__*/_jsxDEV(LobbyView, {\n          setView: setView,\n          quizCode: createdQuizCode,\n          players: players,\n          currentQuiz: currentQuiz,\n          setQuizCode: setQuizCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 24\n        }, this);\n      case 'quiz':\n        return /*#__PURE__*/_jsxDEV(QuizView, {\n          quiz: currentQuiz,\n          userId: userId,\n          quizCode: quizCode,\n          currentQuestionIndex: currentQuestionIndex,\n          selectedAnswer: selectedAnswer,\n          setSelectedAnswer: setSelectedAnswer,\n          setCurrentQuiz: setCurrentQuiz,\n          setView: setView,\n          setQuizResults: setQuizResults,\n          setCurrentQuestionIndex: setCurrentQuestionIndex,\n          setLocalQuizzes: setLocalQuizzes,\n          localQuizzes: localQuizzes,\n          playerName: playerName,\n          userAnswers: userAnswers,\n          setUserAnswers: setUserAnswers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 24\n        }, this);\n      case 'library':\n        return /*#__PURE__*/_jsxDEV(QuizLibrary, {\n          setView: setView,\n          userId: userId,\n          setCreatedQuizCode: setCreatedQuizCode,\n          setQuizCode: setQuizCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 24\n        }, this);\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(ResultsView, {\n          results: quizResults,\n          setView: setView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 24\n        }, this);\n      default:\n        console.log(\"Rendering HomeView\");\n        return /*#__PURE__*/_jsxDEV(HomeView, {\n          setView: setView,\n          myQuizzes: myQuizzes,\n          setCreatedQuizCode: setCreatedQuizCode,\n          userId: userId,\n          loadSavedQuizzes: loadSavedQuizzes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 24\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 text-white min-h-screen flex flex-col items-center justify-center p-4 font-sans\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-4xl mx-auto\",\n      children: renderView()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"d79FUqhOy58gR9ZiaLmanaZii7w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","HomeView","CreateQuizView","AttemptQuizView","LobbyView","QuizView","ResultsView","QuizLibrary","LoadingSpinner","getUserQuizzes","saveQuiz","jsxDEV","_jsxDEV","App","_s","view","setView","userId","setUserId","isAuthReady","setIsAuthReady","quizCode","setQuizCode","createdQuizCode","setCreatedQuizCode","currentQuiz","setCurrentQuiz","players","setPlayers","error","setError","myQuizzes","setMyQuizzes","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","quizResults","setQuizResults","localQuizzes","setLocalQuizzes","playerName","setPlayerName","userAnswers","setUserAnswers","savedQuizzes","setSavedQuizzes","initializeApp","console","log","demoUserId","localStorage","getItem","Date","now","Math","random","toString","substr","setItem","loadSavedQuizzes","quizzes","Object","values","saveQuizToDatabase","quizId","quizData","success","localQuiz","savedQuiz","status","demoQuiz","title","questions","text","options","correctAnswer","createdBy","id","name","renderView","fileName","_jsxFileName","lineNumber","columnNumber","quiz","results","className","children","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/quiz app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import { auth, db, appId } from './firebase/config';\r\n// import { onAuthStateChanged, signInAnonymously } from 'firebase/auth';\r\n// import { doc, onSnapshot } from 'firebase/firestore';\r\n// import { db, appId } from './firebase/config';\r\n\r\n// Import Views\r\nimport { HomeView } from './views/HomeView';\r\nimport { CreateQuizView } from './views/CreateQuizView';\r\nimport { AttemptQuizView } from './views/AttemptQuizView';\r\nimport { LobbyView } from './views/LobbyView';\r\nimport { QuizView } from './views/QuizView';\r\nimport { ResultsView } from './views/ResultsView';\r\nimport { QuizLibrary } from './views/QuizLibrary';\r\n\r\n// Import Common Components\r\nimport { LoadingSpinner } from './components/common/LoadingSpinner';\r\n\r\n// Import Database utilities\r\nimport { getUserQuizzes, saveQuiz } from './utils/quizDatabase';\r\n\r\n\r\nfunction App() {\r\n    const [view, setView] = useState('home');\r\n    const [userId, setUserId] = useState(null);\r\n    const [isAuthReady, setIsAuthReady] = useState(false);\r\n    const [quizCode, setQuizCode] = useState('');\r\n    const [createdQuizCode, setCreatedQuizCode] = useState(null);\r\n    const [currentQuiz, setCurrentQuiz] = useState(null);\r\n    const [players, setPlayers] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [myQuizzes, setMyQuizzes] = useState([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [quizResults, setQuizResults] = useState(null);\r\n    const [localQuizzes, setLocalQuizzes] = useState({}); // Store created quizzes locally\r\n    const [playerName, setPlayerName] = useState(''); // Store player name for quizzes\r\n    const [userAnswers, setUserAnswers] = useState({}); // Store user's answers for score calculation\r\n    const [savedQuizzes, setSavedQuizzes] = useState({}); // Store permanently saved quizzes\r\n\r\n    // --- Authentication Effect ---\r\n    useEffect(() => {\r\n        const initializeApp = async () => {\r\n            // For demo mode, we'll use a persistent user ID stored in localStorage\r\n            console.log(\"Setting up demo authentication\");\r\n            \r\n            let demoUserId = localStorage.getItem('quiz_app_demo_user_id');\r\n            if (!demoUserId) {\r\n                demoUserId = `demo-user-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`;\r\n                localStorage.setItem('quiz_app_demo_user_id', demoUserId);\r\n                console.log(\"Created new demo user ID:\", demoUserId);\r\n            } else {\r\n                console.log(\"Using existing demo user ID:\", demoUserId);\r\n            }\r\n            \r\n            setUserId(demoUserId);\r\n            setIsAuthReady(true);\r\n            \r\n            // Load saved quizzes from database\r\n            await loadSavedQuizzes(demoUserId);\r\n        };\r\n        \r\n        initializeApp();\r\n        \r\n        // Commenting out Firebase auth for demo mode\r\n        /*\r\n        const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n            if (user) {\r\n                setUserId(user.uid);\r\n            } else {\r\n                try {\r\n                    // For demo purposes, we'll use anonymous authentication\r\n                    await signInAnonymously(auth);\r\n                } catch (error) {\r\n                    console.error(\"Authentication failed:\", error);\r\n                    setError(\"Could not connect to the service. Please refresh.\");\r\n                }\r\n            }\r\n            setIsAuthReady(true);\r\n        });\r\n        return () => unsubscribe();\r\n        */\r\n    }, []);\r\n\r\n    // Load saved quizzes from database\r\n    const loadSavedQuizzes = async (userId) => {\r\n        if (userId) {\r\n            console.log(\"Loading saved quizzes for user:\", userId);\r\n            try {\r\n                const quizzes = await getUserQuizzes(userId);\r\n                console.log(\"Loaded quizzes:\", quizzes);\r\n                setSavedQuizzes(quizzes || {});\r\n                setMyQuizzes(Object.values(quizzes || {}));\r\n                console.log(\"Set myQuizzes to:\", Object.values(quizzes || {}));\r\n            } catch (error) {\r\n                console.error(\"Error loading saved quizzes:\", error);\r\n                setSavedQuizzes({});\r\n                setMyQuizzes([]);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Save quiz to database\r\n    const saveQuizToDatabase = async (userId, quizId, quizData) => {\r\n        const success = await saveQuiz(userId, quizId, quizData);\r\n        if (success) {\r\n            await loadSavedQuizzes(userId);\r\n            console.log('Quiz saved to permanent database');\r\n        }\r\n        return success;\r\n    };\r\n\r\n    // --- Fetch User's Quizzes Effect ---\r\n    // Commented out since we're using local storage instead of Firebase\r\n    /*\r\n    useEffect(() => {\r\n        if (!isAuthReady || !userId) return;\r\n\r\n        const quizzesCollectionPath = `/artifacts/${appId}/users/${userId}/quizzes`;\r\n        const q = query(collection(db, quizzesCollectionPath));\r\n        \r\n        const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n            const userQuizzes = [];\r\n            querySnapshot.forEach((doc) => {\r\n                userQuizzes.push({ id: doc.id, ...doc.data() });\r\n            });\r\n            setMyQuizzes(userQuizzes);\r\n        }, (err) => {\r\n            console.error(\"Error fetching user quizzes:\", err);\r\n            setError(\"Could not load your quizzes.\");\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [isAuthReady, userId]);\r\n    */\r\n    \r\n    // --- Lobby Snapshot Effect ---\r\n    useEffect(() => {\r\n        if (view !== 'lobby' || !createdQuizCode) return;\r\n\r\n        // Handle locally created quizzes\r\n        if (localQuizzes && localQuizzes[createdQuizCode]) {\r\n            console.log(\"Loading local quiz for lobby:\", createdQuizCode);\r\n            const localQuiz = localQuizzes[createdQuizCode];\r\n            setCurrentQuiz(localQuiz);\r\n            setPlayers(localQuiz.players || []);\r\n            return;\r\n        }\r\n\r\n        // Handle saved quizzes from database\r\n        if (savedQuizzes && savedQuizzes[createdQuizCode]) {\r\n            console.log(\"Loading saved quiz for lobby:\", createdQuizCode);\r\n            const savedQuiz = savedQuizzes[createdQuizCode];\r\n            setCurrentQuiz(savedQuiz);\r\n            setPlayers(savedQuiz.players || []);\r\n            return;\r\n        }\r\n\r\n        // Firebase fallback disabled for local/demo mode\r\n        /*\r\n        const lobbyDocPath = `/artifacts/${appId}/public/data/quizzes/${createdQuizCode}`;\r\n        const unsubscribe = onSnapshot(doc(db, lobbyDocPath), (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const quizData = docSnap.data();\r\n                setCurrentQuiz(quizData);\r\n                setPlayers(quizData.players || []);\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n        */\r\n    }, [view, createdQuizCode, localQuizzes, savedQuizzes]);\r\n\r\n    // --- Quiz Attempt Snapshot Effect ---\r\n    useEffect(() => {\r\n        if (view !== 'quiz' || !quizCode) return;\r\n\r\n        // First, check if this is a locally created quiz\r\n        if (localQuizzes && localQuizzes[quizCode]) {\r\n            console.log(\"Loading local quiz:\", quizCode);\r\n            const localQuiz = { ...localQuizzes[quizCode] };\r\n            // Set status to active so the quiz can start\r\n            localQuiz.status = 'active';\r\n            setCurrentQuiz(localQuiz);\r\n            setCurrentQuestionIndex(localQuiz.currentQuestionIndex || 0);\r\n            setUserAnswers({}); // Reset user answers for new quiz\r\n            return;\r\n        }\r\n\r\n        // Check if this is a saved quiz from database\r\n        if (savedQuizzes && savedQuizzes[quizCode]) {\r\n            console.log(\"Loading saved quiz:\", quizCode);\r\n            const savedQuiz = { ...savedQuizzes[quizCode] };\r\n            // Set status to active so the quiz can start\r\n            savedQuiz.status = 'active';\r\n            setCurrentQuiz(savedQuiz);\r\n            setCurrentQuestionIndex(savedQuiz.currentQuestionIndex || 0);\r\n            setUserAnswers({}); // Reset user answers for new quiz\r\n            return;\r\n        }\r\n\r\n        // Handle demo quizzes\r\n        if (quizCode === 'DEMO' || quizCode === 'TEST') {\r\n            console.log(\"Setting up demo quiz data\");\r\n            setUserAnswers({}); // Reset user answers for new quiz\r\n            const demoQuiz = {\r\n                title: \"Demo Quiz\",\r\n                questions: [\r\n                    {\r\n                        text: \"What is the capital of France?\",\r\n                        options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\r\n                        correctAnswer: 2 // Paris is the correct answer (index 2)\r\n                    },\r\n                    {\r\n                        text: \"Which planet is known as the Red Planet?\",\r\n                        options: [\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"],\r\n                        correctAnswer: 1 // Mars is the correct answer (index 1)\r\n                    },\r\n                    {\r\n                        text: \"What is 2 + 2?\",\r\n                        options: [\"3\", \"4\", \"5\", \"6\"],\r\n                        correctAnswer: 1 // 4 is the correct answer (index 1)\r\n                    }\r\n                ],\r\n                status: 'active', // Set to active so the quiz can start\r\n                currentQuestionIndex: 0,\r\n                createdBy: userId,\r\n                players: [\r\n                    { id: userId, name: playerName || \"You\" },\r\n                    { id: \"demo-player-1\", name: \"Demo Player 1\" },\r\n                    { id: \"demo-player-2\", name: \"Demo Player 2\" }\r\n                ]\r\n            };\r\n            setCurrentQuiz(demoQuiz);\r\n            setCurrentQuestionIndex(0);\r\n            return;\r\n        }\r\n\r\n        // Firebase fallback disabled for local/demo mode\r\n        /*\r\n        const quizDocPath = `/artifacts/${appId}/public/data/quizzes/${quizCode}`;\r\n        const unsubscribe = onSnapshot(doc(db, quizDocPath), (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const quizData = docSnap.data();\r\n                setCurrentQuiz(quizData);\r\n                setCurrentQuestionIndex(quizData.currentQuestionIndex || 0);\r\n                if (quizData.status === 'finished') {\r\n                    setQuizResults(quizData.results);\r\n                    setView('results');\r\n                }\r\n            } else {\r\n                setError(\"This quiz does not exist or has been closed.\");\r\n                setView('attempt');\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n        */\r\n    }, [view, quizCode, userId, localQuizzes, playerName, savedQuizzes]);\r\n\r\n\r\n    // --- Component Rendering Logic (Router) ---\r\n    const renderView = () => {\r\n        console.log(\"Current view:\", view);\r\n        console.log(\"Auth ready:\", isAuthReady);\r\n        console.log(\"User ID:\", userId);\r\n        \r\n        if (!isAuthReady) {\r\n            return <LoadingSpinner />;\r\n        }\r\n        switch (view) {\r\n            case 'create':\r\n                console.log(\"Rendering CreateQuizView\");\r\n                return <CreateQuizView \r\n                    setView={setView} \r\n                    userId={userId} \r\n                    setCreatedQuizCode={setCreatedQuizCode} \r\n                    setLocalQuizzes={setLocalQuizzes}\r\n                    saveQuizToDatabase={saveQuizToDatabase}\r\n                />;\r\n            case 'attempt':\r\n                return <AttemptQuizView \r\n                    setView={setView} \r\n                    setQuizCode={setQuizCode} \r\n                    setError={setError} \r\n                    error={error} \r\n                    userId={userId} \r\n                    localQuizzes={localQuizzes}\r\n                    savedQuizzes={savedQuizzes}\r\n                    setPlayerName={setPlayerName} \r\n                />;\r\n            case 'lobby':\r\n                console.log(\"Rendering LobbyView with quizCode:\", createdQuizCode);\r\n                return <LobbyView setView={setView} quizCode={createdQuizCode} players={players} currentQuiz={currentQuiz} setQuizCode={setQuizCode} />;\r\n            case 'quiz':\r\n                return <QuizView \r\n                    quiz={currentQuiz} \r\n                    userId={userId} \r\n                    quizCode={quizCode} \r\n                    currentQuestionIndex={currentQuestionIndex} \r\n                    selectedAnswer={selectedAnswer} \r\n                    setSelectedAnswer={setSelectedAnswer}\r\n                    setCurrentQuiz={setCurrentQuiz}\r\n                    setView={setView}\r\n                    setQuizResults={setQuizResults}\r\n                    setCurrentQuestionIndex={setCurrentQuestionIndex}\r\n                    setLocalQuizzes={setLocalQuizzes}\r\n                    localQuizzes={localQuizzes}\r\n                    playerName={playerName}\r\n                    userAnswers={userAnswers}\r\n                    setUserAnswers={setUserAnswers}\r\n                />;\r\n            case 'library':\r\n                return <QuizLibrary \r\n                    setView={setView} \r\n                    userId={userId} \r\n                    setCreatedQuizCode={setCreatedQuizCode}\r\n                    setQuizCode={setQuizCode}\r\n                />;\r\n            case 'results':\r\n                return <ResultsView results={quizResults} setView={setView} />;\r\n            default:\r\n                console.log(\"Rendering HomeView\");\r\n                return <HomeView \r\n                    setView={setView} \r\n                    myQuizzes={myQuizzes} \r\n                    setCreatedQuizCode={setCreatedQuizCode} \r\n                    userId={userId} \r\n                    loadSavedQuizzes={loadSavedQuizzes}\r\n                />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-gray-900 text-white min-h-screen flex flex-col items-center justify-center p-4 font-sans\">\r\n            <div className=\"w-full max-w-4xl mx-auto\">\r\n                {renderView()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}