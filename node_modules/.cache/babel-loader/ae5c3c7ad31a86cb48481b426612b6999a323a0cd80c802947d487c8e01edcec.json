{"ast":null,"code":"// Quiz Database utility functions with MongoDB and localStorage fallback\n// This provides persistent storage for user quizzes\n\nconst QUIZ_STORAGE_KEY = 'quiz_app_user_quizzes';\nconst QUIZ_HISTORY_KEY = 'quiz_app_quiz_history';\n\n// MongoDB connection string\nconst MONGODB_URI = 'mongodb+srv://saadsaleem17oct:mmsMijMD1g9r1uyM@cluster0.xwdy0te.mongodb.net/quiz-app';\n\n// API base URL (you can change this to your backend URL when available)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Check if we're in demo mode or have API access\nconst isDemoMode = () => {\n  return process.env.REACT_APP_DEMO_MODE === 'true';\n};\n\n// Get all saved quizzes for a user\nexport const getUserQuizzes = async userId => {\n  console.log(\"getUserQuizzes called with userId:\", userId);\n  console.log(\"Demo mode:\", isDemoMode());\n  console.log(\"API_BASE_URL:\", API_BASE_URL);\n  console.log(\"REACT_APP_DEMO_MODE:\", process.env.REACT_APP_DEMO_MODE);\n  console.log(\"REACT_APP_API_URL:\", process.env.REACT_APP_API_URL);\n  if (isDemoMode()) {\n    // Use localStorage for demo mode\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      console.log(\"All quizzes from localStorage:\", allQuizzes);\n      const userQuizzes = allQuizzes[userId] || {};\n      console.log(`User ${userId} quizzes:`, userQuizzes);\n      return userQuizzes;\n    } catch (error) {\n      console.error('Error reading user quizzes from localStorage:', error);\n      return {};\n    }\n  }\n\n  // Use MongoDB API for production\n  try {\n    console.log(\"Making API request to:\", `${API_BASE_URL}/quizzes/user/${userId}`);\n    const response = await fetch(`${API_BASE_URL}/quizzes/user/${userId}`);\n    console.log(\"API response status:\", response.status);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const quizzes = await response.json();\n    console.log(\"API response data:\", quizzes);\n\n    // Backend already returns object format, no need to convert\n    console.log(\"Returning quizzes object:\", quizzes);\n    return quizzes;\n  } catch (error) {\n    console.error('Error fetching user quizzes from API:', error);\n    // Fallback to localStorage if API fails\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      return allQuizzes[userId] || {};\n    } catch (localError) {\n      console.error('Error reading from localStorage fallback:', localError);\n      return {};\n    }\n  }\n};\n\n// Save a quiz for a user\nexport const saveQuiz = async (userId, quizId, quizData) => {\n  console.log(\"saveQuiz called with:\", {\n    userId,\n    quizId,\n    quizData\n  });\n  console.log(\"Demo mode:\", isDemoMode());\n  if (isDemoMode()) {\n    // Use localStorage for demo mode\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      console.log(\"Current allQuizzes before save:\", allQuizzes);\n      if (!allQuizzes[userId]) {\n        allQuizzes[userId] = {};\n      }\n\n      // Add metadata\n      const quizWithMetadata = {\n        ...quizData,\n        id: quizId,\n        userId: userId,\n        savedAt: new Date().toISOString(),\n        lastUsed: new Date().toISOString(),\n        timesUsed: 0,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      allQuizzes[userId][quizId] = quizWithMetadata;\n      localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n      console.log('Quiz saved to localStorage:', quizId);\n      console.log(\"Updated allQuizzes after save:\", allQuizzes);\n      return true;\n    } catch (error) {\n      console.error('Error saving quiz to localStorage:', error);\n      return false;\n    }\n  }\n\n  // Use MongoDB API for production\n  try {\n    const quizWithMetadata = {\n      ...quizData,\n      id: quizId,\n      userId: userId,\n      savedAt: new Date().toISOString(),\n      lastUsed: new Date().toISOString(),\n      timesUsed: 0,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    const response = await fetch(`${API_BASE_URL}/quizzes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(quizWithMetadata)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.log('Quiz saved to MongoDB:', quizId);\n    return true;\n  } catch (error) {\n    console.error('Error saving quiz to API:', error);\n\n    // Fallback to localStorage if API fails\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      if (!allQuizzes[userId]) {\n        allQuizzes[userId] = {};\n      }\n      const quizWithMetadata = {\n        ...quizData,\n        id: quizId,\n        userId: userId,\n        savedAt: new Date().toISOString(),\n        lastUsed: new Date().toISOString(),\n        timesUsed: 0,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      allQuizzes[userId][quizId] = quizWithMetadata;\n      localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n      console.log('Quiz saved to localStorage (fallback):', quizId);\n      return true;\n    } catch (localError) {\n      console.error('Error saving to localStorage fallback:', localError);\n      return false;\n    }\n  }\n};\n\n// Delete a quiz\nexport const deleteQuiz = async (userId, quizId) => {\n  if (isDemoMode()) {\n    // Use localStorage for demo mode\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\n        delete allQuizzes[userId][quizId];\n        localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n        console.log('Quiz deleted from localStorage:', quizId);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error deleting quiz from localStorage:', error);\n      return false;\n    }\n  }\n\n  // Use MongoDB API for production\n  try {\n    const response = await fetch(`${API_BASE_URL}/quizzes/${quizId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.log('Quiz deleted from MongoDB:', quizId);\n    return true;\n  } catch (error) {\n    console.error('Error deleting quiz from API:', error);\n\n    // Fallback to localStorage if API fails\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\n        delete allQuizzes[userId][quizId];\n        localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n        console.log('Quiz deleted from localStorage (fallback):', quizId);\n        return true;\n      }\n      return false;\n    } catch (localError) {\n      console.error('Error deleting from localStorage fallback:', localError);\n      return false;\n    }\n  }\n};\n\n// Update quiz usage (when someone starts the quiz)\nexport const updateQuizUsage = async (userId, quizId) => {\n  if (isDemoMode()) {\n    // Use localStorage for demo mode\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\n        allQuizzes[userId][quizId].lastUsed = new Date().toISOString();\n        allQuizzes[userId][quizId].timesUsed = (allQuizzes[userId][quizId].timesUsed || 0) + 1;\n        allQuizzes[userId][quizId].updatedAt = new Date().toISOString();\n        localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error updating quiz usage in localStorage:', error);\n      return false;\n    }\n  }\n\n  // Use MongoDB API for production\n  try {\n    const response = await fetch(`${API_BASE_URL}/quizzes/${quizId}/usage`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return true;\n  } catch (error) {\n    console.error('Error updating quiz usage via API:', error);\n\n    // Fallback to localStorage if API fails\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\n        allQuizzes[userId][quizId].lastUsed = new Date().toISOString();\n        allQuizzes[userId][quizId].timesUsed = (allQuizzes[userId][quizId].timesUsed || 0) + 1;\n        allQuizzes[userId][quizId].updatedAt = new Date().toISOString();\n        localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n        return true;\n      }\n      return false;\n    } catch (localError) {\n      console.error('Error updating quiz usage in localStorage fallback:', localError);\n      return false;\n    }\n  }\n};\n\n// Get quiz statistics\nexport const getQuizStats = async userId => {\n  try {\n    const userQuizzes = await getUserQuizzes(userId);\n    const quizzes = Object.values(userQuizzes);\n    return {\n      totalQuizzes: quizzes.length,\n      totalQuestions: quizzes.reduce((sum, quiz) => {\n        var _quiz$questions;\n        return sum + (((_quiz$questions = quiz.questions) === null || _quiz$questions === void 0 ? void 0 : _quiz$questions.length) || 0);\n      }, 0),\n      mostUsedQuiz: quizzes.reduce((max, quiz) => (quiz.timesUsed || 0) > (max.timesUsed || 0) ? quiz : max, quizzes[0] || null),\n      recentQuizzes: quizzes.sort((a, b) => new Date(b.lastUsed) - new Date(a.lastUsed)).slice(0, 5)\n    };\n  } catch (error) {\n    console.error('Error getting quiz stats:', error);\n    return {\n      totalQuizzes: 0,\n      totalQuestions: 0,\n      mostUsedQuiz: null,\n      recentQuizzes: []\n    };\n  }\n};\n\n// Search quizzes by title\nexport const searchQuizzes = async (userId, searchTerm) => {\n  try {\n    const userQuizzes = await getUserQuizzes(userId);\n    const searchLower = searchTerm.toLowerCase();\n    const matchingQuizzes = Object.entries(userQuizzes).filter(([quizId, quiz]) => {\n      var _quiz$title;\n      return (_quiz$title = quiz.title) === null || _quiz$title === void 0 ? void 0 : _quiz$title.toLowerCase().includes(searchLower);\n    });\n    return Object.fromEntries(matchingQuizzes);\n  } catch (error) {\n    console.error('Error searching quizzes:', error);\n    return {};\n  }\n};\n\n// Export all user data (for backup)\nexport const exportUserData = async userId => {\n  try {\n    const userQuizzes = await getUserQuizzes(userId);\n    const stats = await getQuizStats(userId);\n    return {\n      userId,\n      exportDate: new Date().toISOString(),\n      quizzes: userQuizzes,\n      stats\n    };\n  } catch (error) {\n    console.error('Error exporting user data:', error);\n    return null;\n  }\n};\n\n// Import user data (for restore)\nexport const importUserData = async (userId, userData) => {\n  if (isDemoMode()) {\n    // Use localStorage for demo mode\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      allQuizzes[userId] = userData.quizzes;\n      localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n      console.log('User data imported to localStorage successfully');\n      return true;\n    } catch (error) {\n      console.error('Error importing user data to localStorage:', error);\n      return false;\n    }\n  }\n\n  // Use MongoDB API for production\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/import`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.log('User data imported to MongoDB successfully');\n    return true;\n  } catch (error) {\n    console.error('Error importing user data to API:', error);\n\n    // Fallback to localStorage if API fails\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      allQuizzes[userId] = userData.quizzes;\n      localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n      console.log('User data imported to localStorage (fallback) successfully');\n      return true;\n    } catch (localError) {\n      console.error('Error importing user data to localStorage fallback:', localError);\n      return false;\n    }\n  }\n};\n\n// Save quiz result to database\nexport const saveQuizResult = async resultData => {\n  if (isDemoMode()) {\n    // Use localStorage for demo mode\n    try {\n      const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\n      const result = {\n        ...resultData,\n        id: `result_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        completedAt: new Date().toISOString()\n      };\n      results.push(result);\n      localStorage.setItem(QUIZ_HISTORY_KEY, JSON.stringify(results));\n      console.log('Quiz result saved to localStorage');\n      return true;\n    } catch (error) {\n      console.error('Error saving quiz result to localStorage:', error);\n      return false;\n    }\n  }\n\n  // Use MongoDB API for production\n  try {\n    const response = await fetch(`${API_BASE_URL}/quiz-results`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...resultData,\n        completedAt: new Date().toISOString()\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.log('Quiz result saved to MongoDB');\n    return true;\n  } catch (error) {\n    console.error('Error saving quiz result to API:', error);\n\n    // Fallback to localStorage if API fails\n    try {\n      const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\n      const result = {\n        ...resultData,\n        id: `result_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        completedAt: new Date().toISOString()\n      };\n      results.push(result);\n      localStorage.setItem(QUIZ_HISTORY_KEY, JSON.stringify(results));\n      console.log('Quiz result saved to localStorage (fallback)');\n      return true;\n    } catch (localError) {\n      console.error('Error saving quiz result to localStorage fallback:', localError);\n      return false;\n    }\n  }\n};\n\n// Get quiz results for a user\nexport const getUserQuizResults = async userId => {\n  if (isDemoMode()) {\n    // Use localStorage for demo mode\n    try {\n      const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\n      return results.filter(result => result.userId === userId);\n    } catch (error) {\n      console.error('Error reading quiz results from localStorage:', error);\n      return [];\n    }\n  }\n\n  // Use MongoDB API for production\n  try {\n    const response = await fetch(`${API_BASE_URL}/quiz-results/user/${userId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching quiz results from API:', error);\n\n    // Fallback to localStorage if API fails\n    try {\n      const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\n      return results.filter(result => result.userId === userId);\n    } catch (localError) {\n      console.error('Error reading quiz results from localStorage fallback:', localError);\n      return [];\n    }\n  }\n};\n\n// Get leaderboard for a specific quiz\nexport const getQuizLeaderboard = async quizId => {\n  if (isDemoMode()) {\n    // Use localStorage for demo mode\n    try {\n      const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\n      return results.filter(result => result.quizId === quizId).sort((a, b) => b.score - a.score).slice(0, 10); // Top 10 scores\n    } catch (error) {\n      console.error('Error reading leaderboard from localStorage:', error);\n      return [];\n    }\n  }\n\n  // Use MongoDB API for production\n  try {\n    const response = await fetch(`${API_BASE_URL}/quiz-results/quiz/${quizId}/leaderboard`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching leaderboard from API:', error);\n\n    // Fallback to localStorage if API fails\n    try {\n      const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\n      return results.filter(result => result.quizId === quizId).sort((a, b) => b.score - a.score).slice(0, 10); // Top 10 scores\n    } catch (localError) {\n      console.error('Error reading leaderboard from localStorage fallback:', localError);\n      return [];\n    }\n  }\n};","map":{"version":3,"names":["QUIZ_STORAGE_KEY","QUIZ_HISTORY_KEY","MONGODB_URI","API_BASE_URL","process","env","REACT_APP_API_URL","isDemoMode","REACT_APP_DEMO_MODE","getUserQuizzes","userId","console","log","allQuizzes","JSON","parse","localStorage","getItem","userQuizzes","error","response","fetch","status","ok","Error","quizzes","json","localError","saveQuiz","quizId","quizData","quizWithMetadata","id","savedAt","Date","toISOString","lastUsed","timesUsed","createdAt","updatedAt","setItem","stringify","method","headers","body","deleteQuiz","updateQuizUsage","getQuizStats","Object","values","totalQuizzes","length","totalQuestions","reduce","sum","quiz","_quiz$questions","questions","mostUsedQuiz","max","recentQuizzes","sort","a","b","slice","searchQuizzes","searchTerm","searchLower","toLowerCase","matchingQuizzes","entries","filter","_quiz$title","title","includes","fromEntries","exportUserData","stats","exportDate","importUserData","userData","saveQuizResult","resultData","results","result","now","Math","random","toString","substr","completedAt","push","getUserQuizResults","getQuizLeaderboard","score"],"sources":["C:/Users/ACER/Desktop/quiz app/src/utils/quizDatabase.js"],"sourcesContent":["// Quiz Database utility functions with MongoDB and localStorage fallback\r\n// This provides persistent storage for user quizzes\r\n\r\nconst QUIZ_STORAGE_KEY = 'quiz_app_user_quizzes';\r\nconst QUIZ_HISTORY_KEY = 'quiz_app_quiz_history';\r\n\r\n// MongoDB connection string\r\nconst MONGODB_URI = 'mongodb+srv://saadsaleem17oct:mmsMijMD1g9r1uyM@cluster0.xwdy0te.mongodb.net/quiz-app';\r\n\r\n// API base URL (you can change this to your backend URL when available)\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\n// Check if we're in demo mode or have API access\r\nconst isDemoMode = () => {\r\n    return process.env.REACT_APP_DEMO_MODE === 'true';\r\n};\r\n\r\n// Get all saved quizzes for a user\r\nexport const getUserQuizzes = async (userId) => {\r\n    console.log(\"getUserQuizzes called with userId:\", userId);\r\n    console.log(\"Demo mode:\", isDemoMode());\r\n    console.log(\"API_BASE_URL:\", API_BASE_URL);\r\n    console.log(\"REACT_APP_DEMO_MODE:\", process.env.REACT_APP_DEMO_MODE);\r\n    console.log(\"REACT_APP_API_URL:\", process.env.REACT_APP_API_URL);\r\n    \r\n    if (isDemoMode()) {\r\n        // Use localStorage for demo mode\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            console.log(\"All quizzes from localStorage:\", allQuizzes);\r\n            const userQuizzes = allQuizzes[userId] || {};\r\n            console.log(`User ${userId} quizzes:`, userQuizzes);\r\n            return userQuizzes;\r\n        } catch (error) {\r\n            console.error('Error reading user quizzes from localStorage:', error);\r\n            return {};\r\n        }\r\n    }\r\n\r\n    // Use MongoDB API for production\r\n    try {\r\n        console.log(\"Making API request to:\", `${API_BASE_URL}/quizzes/user/${userId}`);\r\n        const response = await fetch(`${API_BASE_URL}/quizzes/user/${userId}`);\r\n        console.log(\"API response status:\", response.status);\r\n        \r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const quizzes = await response.json();\r\n        console.log(\"API response data:\", quizzes);\r\n        \r\n        // Backend already returns object format, no need to convert\r\n        console.log(\"Returning quizzes object:\", quizzes);\r\n        return quizzes;\r\n    } catch (error) {\r\n        console.error('Error fetching user quizzes from API:', error);\r\n        // Fallback to localStorage if API fails\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            return allQuizzes[userId] || {};\r\n        } catch (localError) {\r\n            console.error('Error reading from localStorage fallback:', localError);\r\n            return {};\r\n        }\r\n    }\r\n};\r\n\r\n// Save a quiz for a user\r\nexport const saveQuiz = async (userId, quizId, quizData) => {\r\n    console.log(\"saveQuiz called with:\", { userId, quizId, quizData });\r\n    console.log(\"Demo mode:\", isDemoMode());\r\n    \r\n    if (isDemoMode()) {\r\n        // Use localStorage for demo mode\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            console.log(\"Current allQuizzes before save:\", allQuizzes);\r\n            \r\n            if (!allQuizzes[userId]) {\r\n                allQuizzes[userId] = {};\r\n            }\r\n            \r\n            // Add metadata\r\n            const quizWithMetadata = {\r\n                ...quizData,\r\n                id: quizId,\r\n                userId: userId,\r\n                savedAt: new Date().toISOString(),\r\n                lastUsed: new Date().toISOString(),\r\n                timesUsed: 0,\r\n                createdAt: new Date().toISOString(),\r\n                updatedAt: new Date().toISOString()\r\n            };\r\n            \r\n            allQuizzes[userId][quizId] = quizWithMetadata;\r\n            localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n            \r\n            console.log('Quiz saved to localStorage:', quizId);\r\n            console.log(\"Updated allQuizzes after save:\", allQuizzes);\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error saving quiz to localStorage:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Use MongoDB API for production\r\n    try {\r\n        const quizWithMetadata = {\r\n            ...quizData,\r\n            id: quizId,\r\n            userId: userId,\r\n            savedAt: new Date().toISOString(),\r\n            lastUsed: new Date().toISOString(),\r\n            timesUsed: 0,\r\n            createdAt: new Date().toISOString(),\r\n            updatedAt: new Date().toISOString()\r\n        };\r\n\r\n        const response = await fetch(`${API_BASE_URL}/quizzes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(quizWithMetadata)\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        console.log('Quiz saved to MongoDB:', quizId);\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error saving quiz to API:', error);\r\n        \r\n        // Fallback to localStorage if API fails\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            \r\n            if (!allQuizzes[userId]) {\r\n                allQuizzes[userId] = {};\r\n            }\r\n            \r\n            const quizWithMetadata = {\r\n                ...quizData,\r\n                id: quizId,\r\n                userId: userId,\r\n                savedAt: new Date().toISOString(),\r\n                lastUsed: new Date().toISOString(),\r\n                timesUsed: 0,\r\n                createdAt: new Date().toISOString(),\r\n                updatedAt: new Date().toISOString()\r\n            };\r\n            \r\n            allQuizzes[userId][quizId] = quizWithMetadata;\r\n            localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n            \r\n            console.log('Quiz saved to localStorage (fallback):', quizId);\r\n            return true;\r\n        } catch (localError) {\r\n            console.error('Error saving to localStorage fallback:', localError);\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n// Delete a quiz\r\nexport const deleteQuiz = async (userId, quizId) => {\r\n    if (isDemoMode()) {\r\n        // Use localStorage for demo mode\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            \r\n            if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\r\n                delete allQuizzes[userId][quizId];\r\n                localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n                console.log('Quiz deleted from localStorage:', quizId);\r\n                return true;\r\n            }\r\n            \r\n            return false;\r\n        } catch (error) {\r\n            console.error('Error deleting quiz from localStorage:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Use MongoDB API for production\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/quizzes/${quizId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ userId })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        console.log('Quiz deleted from MongoDB:', quizId);\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error deleting quiz from API:', error);\r\n        \r\n        // Fallback to localStorage if API fails\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            \r\n            if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\r\n                delete allQuizzes[userId][quizId];\r\n                localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n                console.log('Quiz deleted from localStorage (fallback):', quizId);\r\n                return true;\r\n            }\r\n            \r\n            return false;\r\n        } catch (localError) {\r\n            console.error('Error deleting from localStorage fallback:', localError);\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n// Update quiz usage (when someone starts the quiz)\r\nexport const updateQuizUsage = async (userId, quizId) => {\r\n    if (isDemoMode()) {\r\n        // Use localStorage for demo mode\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            \r\n            if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\r\n                allQuizzes[userId][quizId].lastUsed = new Date().toISOString();\r\n                allQuizzes[userId][quizId].timesUsed = (allQuizzes[userId][quizId].timesUsed || 0) + 1;\r\n                allQuizzes[userId][quizId].updatedAt = new Date().toISOString();\r\n                localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n                return true;\r\n            }\r\n            \r\n            return false;\r\n        } catch (error) {\r\n            console.error('Error updating quiz usage in localStorage:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Use MongoDB API for production\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/quizzes/${quizId}/usage`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ userId })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error updating quiz usage via API:', error);\r\n        \r\n        // Fallback to localStorage if API fails\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            \r\n            if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\r\n                allQuizzes[userId][quizId].lastUsed = new Date().toISOString();\r\n                allQuizzes[userId][quizId].timesUsed = (allQuizzes[userId][quizId].timesUsed || 0) + 1;\r\n                allQuizzes[userId][quizId].updatedAt = new Date().toISOString();\r\n                localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n                return true;\r\n            }\r\n            \r\n            return false;\r\n        } catch (localError) {\r\n            console.error('Error updating quiz usage in localStorage fallback:', localError);\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n// Get quiz statistics\r\nexport const getQuizStats = async (userId) => {\r\n    try {\r\n        const userQuizzes = await getUserQuizzes(userId);\r\n        const quizzes = Object.values(userQuizzes);\r\n        \r\n        return {\r\n            totalQuizzes: quizzes.length,\r\n            totalQuestions: quizzes.reduce((sum, quiz) => sum + (quiz.questions?.length || 0), 0),\r\n            mostUsedQuiz: quizzes.reduce((max, quiz) => \r\n                (quiz.timesUsed || 0) > (max.timesUsed || 0) ? quiz : max, \r\n                quizzes[0] || null\r\n            ),\r\n            recentQuizzes: quizzes\r\n                .sort((a, b) => new Date(b.lastUsed) - new Date(a.lastUsed))\r\n                .slice(0, 5)\r\n        };\r\n    } catch (error) {\r\n        console.error('Error getting quiz stats:', error);\r\n        return {\r\n            totalQuizzes: 0,\r\n            totalQuestions: 0,\r\n            mostUsedQuiz: null,\r\n            recentQuizzes: []\r\n        };\r\n    }\r\n};\r\n\r\n// Search quizzes by title\r\nexport const searchQuizzes = async (userId, searchTerm) => {\r\n    try {\r\n        const userQuizzes = await getUserQuizzes(userId);\r\n        const searchLower = searchTerm.toLowerCase();\r\n        \r\n        const matchingQuizzes = Object.entries(userQuizzes).filter(([quizId, quiz]) => \r\n            quiz.title?.toLowerCase().includes(searchLower)\r\n        );\r\n        \r\n        return Object.fromEntries(matchingQuizzes);\r\n    } catch (error) {\r\n        console.error('Error searching quizzes:', error);\r\n        return {};\r\n    }\r\n};\r\n\r\n// Export all user data (for backup)\r\nexport const exportUserData = async (userId) => {\r\n    try {\r\n        const userQuizzes = await getUserQuizzes(userId);\r\n        const stats = await getQuizStats(userId);\r\n        \r\n        return {\r\n            userId,\r\n            exportDate: new Date().toISOString(),\r\n            quizzes: userQuizzes,\r\n            stats\r\n        };\r\n    } catch (error) {\r\n        console.error('Error exporting user data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Import user data (for restore)\r\nexport const importUserData = async (userId, userData) => {\r\n    if (isDemoMode()) {\r\n        // Use localStorage for demo mode\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            allQuizzes[userId] = userData.quizzes;\r\n            localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n            \r\n            console.log('User data imported to localStorage successfully');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error importing user data to localStorage:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Use MongoDB API for production\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/users/${userId}/import`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData)\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        console.log('User data imported to MongoDB successfully');\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error importing user data to API:', error);\r\n        \r\n        // Fallback to localStorage if API fails\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            allQuizzes[userId] = userData.quizzes;\r\n            localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n            \r\n            console.log('User data imported to localStorage (fallback) successfully');\r\n            return true;\r\n        } catch (localError) {\r\n            console.error('Error importing user data to localStorage fallback:', localError);\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n// Save quiz result to database\r\nexport const saveQuizResult = async (resultData) => {\r\n    if (isDemoMode()) {\r\n        // Use localStorage for demo mode\r\n        try {\r\n            const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\r\n            const result = {\r\n                ...resultData,\r\n                id: `result_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n                completedAt: new Date().toISOString()\r\n            };\r\n            results.push(result);\r\n            localStorage.setItem(QUIZ_HISTORY_KEY, JSON.stringify(results));\r\n            \r\n            console.log('Quiz result saved to localStorage');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error saving quiz result to localStorage:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Use MongoDB API for production\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/quiz-results`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                ...resultData,\r\n                completedAt: new Date().toISOString()\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        console.log('Quiz result saved to MongoDB');\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error saving quiz result to API:', error);\r\n        \r\n        // Fallback to localStorage if API fails\r\n        try {\r\n            const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\r\n            const result = {\r\n                ...resultData,\r\n                id: `result_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n                completedAt: new Date().toISOString()\r\n            };\r\n            results.push(result);\r\n            localStorage.setItem(QUIZ_HISTORY_KEY, JSON.stringify(results));\r\n            \r\n            console.log('Quiz result saved to localStorage (fallback)');\r\n            return true;\r\n        } catch (localError) {\r\n            console.error('Error saving quiz result to localStorage fallback:', localError);\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n// Get quiz results for a user\r\nexport const getUserQuizResults = async (userId) => {\r\n    if (isDemoMode()) {\r\n        // Use localStorage for demo mode\r\n        try {\r\n            const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\r\n            return results.filter(result => result.userId === userId);\r\n        } catch (error) {\r\n            console.error('Error reading quiz results from localStorage:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    // Use MongoDB API for production\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/quiz-results/user/${userId}`);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error fetching quiz results from API:', error);\r\n        \r\n        // Fallback to localStorage if API fails\r\n        try {\r\n            const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\r\n            return results.filter(result => result.userId === userId);\r\n        } catch (localError) {\r\n            console.error('Error reading quiz results from localStorage fallback:', localError);\r\n            return [];\r\n        }\r\n    }\r\n};\r\n\r\n// Get leaderboard for a specific quiz\r\nexport const getQuizLeaderboard = async (quizId) => {\r\n    if (isDemoMode()) {\r\n        // Use localStorage for demo mode\r\n        try {\r\n            const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\r\n            return results\r\n                .filter(result => result.quizId === quizId)\r\n                .sort((a, b) => b.score - a.score)\r\n                .slice(0, 10); // Top 10 scores\r\n        } catch (error) {\r\n            console.error('Error reading leaderboard from localStorage:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    // Use MongoDB API for production\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/quiz-results/quiz/${quizId}/leaderboard`);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error fetching leaderboard from API:', error);\r\n        \r\n        // Fallback to localStorage if API fails\r\n        try {\r\n            const results = JSON.parse(localStorage.getItem(QUIZ_HISTORY_KEY) || '[]');\r\n            return results\r\n                .filter(result => result.quizId === quizId)\r\n                .sort((a, b) => b.score - a.score)\r\n                .slice(0, 10); // Top 10 scores\r\n        } catch (localError) {\r\n            console.error('Error reading leaderboard from localStorage fallback:', localError);\r\n            return [];\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}