{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\quiz app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { auth, db, appId } from './firebase/config';\nimport { onAuthStateChanged, signInAnonymously } from 'firebase/auth';\nimport { doc, onSnapshot, collection, query } from 'firebase/firestore';\n\n// Import Views\nimport { HomeView } from './views/HomeView';\nimport { CreateQuizView } from './views/CreateQuizView';\nimport { AttemptQuizView } from './views/AttemptQuizView';\nimport { LobbyView } from './views/LobbyView';\nimport { QuizView } from './views/QuizView';\nimport { ResultsView } from './views/ResultsView';\n\n// Import Common Components\nimport { LoadingSpinner } from './components/common/LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [view, setView] = useState('home');\n  const [userId, setUserId] = useState(null);\n  const [isAuthReady, setIsAuthReady] = useState(false);\n  const [quizCode, setQuizCode] = useState('');\n  const [createdQuizCode, setCreatedQuizCode] = useState(null);\n  const [currentQuiz, setCurrentQuiz] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [error, setError] = useState('');\n  const [myQuizzes, setMyQuizzes] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [quizResults, setQuizResults] = useState(null);\n\n  // --- Authentication Effect ---\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      if (user) {\n        setUserId(user.uid);\n      } else {\n        try {\n          // For demo purposes, we'll use anonymous authentication\n          await signInAnonymously(auth);\n        } catch (error) {\n          console.error(\"Authentication failed:\", error);\n          setError(\"Could not connect to the service. Please refresh.\");\n        }\n      }\n      setIsAuthReady(true);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // --- Fetch User's Quizzes Effect ---\n  useEffect(() => {\n    if (!isAuthReady || !userId) return;\n    const quizzesCollectionPath = `/artifacts/${appId}/users/${userId}/quizzes`;\n    const q = query(collection(db, quizzesCollectionPath));\n    const unsubscribe = onSnapshot(q, querySnapshot => {\n      const userQuizzes = [];\n      querySnapshot.forEach(doc => {\n        userQuizzes.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      setMyQuizzes(userQuizzes);\n    }, err => {\n      console.error(\"Error fetching user quizzes:\", err);\n      setError(\"Could not load your quizzes.\");\n    });\n    return () => unsubscribe();\n  }, [isAuthReady, userId]);\n\n  // --- Lobby Snapshot Effect ---\n  useEffect(() => {\n    if (view !== 'lobby' || !createdQuizCode) return;\n    const lobbyDocPath = `/artifacts/${appId}/public/data/quizzes/${createdQuizCode}`;\n    const unsubscribe = onSnapshot(doc(db, lobbyDocPath), docSnap => {\n      if (docSnap.exists()) {\n        const quizData = docSnap.data();\n        setCurrentQuiz(quizData);\n        setPlayers(quizData.players || []);\n      }\n    });\n    return () => unsubscribe();\n  }, [view, createdQuizCode]);\n\n  // --- Quiz Attempt Snapshot Effect ---\n  useEffect(() => {\n    if (view !== 'quiz' || !quizCode) return;\n\n    // Handle demo quizzes\n    if (quizCode === 'DEMO' || quizCode === 'TEST') {\n      console.log(\"Setting up demo quiz data\");\n      const demoQuiz = {\n        title: \"Demo Quiz\",\n        questions: [{\n          text: \"What is the capital of France?\",\n          options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"]\n        }, {\n          text: \"Which planet is known as the Red Planet?\",\n          options: [\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        }, {\n          text: \"What is 2 + 2?\",\n          options: [\"3\", \"4\", \"5\", \"6\"]\n        }],\n        status: 'active',\n        // Set to active so the quiz can start\n        currentQuestionIndex: 0,\n        createdBy: userId,\n        players: [{\n          id: userId,\n          name: \"You\"\n        }, {\n          id: \"demo-player-1\",\n          name: \"Demo Player 1\"\n        }, {\n          id: \"demo-player-2\",\n          name: \"Demo Player 2\"\n        }]\n      };\n      setCurrentQuiz(demoQuiz);\n      setCurrentQuestionIndex(0);\n      return;\n    }\n    const quizDocPath = `/artifacts/${appId}/public/data/quizzes/${quizCode}`;\n    const unsubscribe = onSnapshot(doc(db, quizDocPath), docSnap => {\n      if (docSnap.exists()) {\n        const quizData = docSnap.data();\n        setCurrentQuiz(quizData);\n        setCurrentQuestionIndex(quizData.currentQuestionIndex || 0);\n        if (quizData.status === 'finished') {\n          setQuizResults(quizData.results);\n          setView('results');\n        }\n      } else {\n        setError(\"This quiz does not exist or has been closed.\");\n        setView('attempt');\n      }\n    });\n    return () => unsubscribe();\n  }, [view, quizCode, userId]);\n\n  // --- Component Rendering Logic (Router) ---\n  const renderView = () => {\n    console.log(\"Current view:\", view);\n    console.log(\"Auth ready:\", isAuthReady);\n    console.log(\"User ID:\", userId);\n    if (!isAuthReady) {\n      return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 20\n      }, this);\n    }\n    switch (view) {\n      case 'create':\n        console.log(\"Rendering CreateQuizView\");\n        return /*#__PURE__*/_jsxDEV(CreateQuizView, {\n          setView: setView,\n          userId: userId,\n          setCreatedQuizCode: setCreatedQuizCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 24\n        }, this);\n      case 'attempt':\n        return /*#__PURE__*/_jsxDEV(AttemptQuizView, {\n          setView: setView,\n          setQuizCode: setQuizCode,\n          setError: setError,\n          error: error,\n          userId: userId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 24\n        }, this);\n      case 'lobby':\n        console.log(\"Rendering LobbyView with quizCode:\", createdQuizCode);\n        return /*#__PURE__*/_jsxDEV(LobbyView, {\n          setView: setView,\n          quizCode: createdQuizCode,\n          players: players,\n          currentQuiz: currentQuiz\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 24\n        }, this);\n      case 'quiz':\n        return /*#__PURE__*/_jsxDEV(QuizView, {\n          quiz: currentQuiz,\n          userId: userId,\n          quizCode: quizCode,\n          currentQuestionIndex: currentQuestionIndex,\n          selectedAnswer: selectedAnswer,\n          setSelectedAnswer: setSelectedAnswer,\n          setCurrentQuiz: setCurrentQuiz,\n          setView: setView,\n          setQuizResults: setQuizResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 24\n        }, this);\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(ResultsView, {\n          results: quizResults,\n          setView: setView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 24\n        }, this);\n      default:\n        console.log(\"Rendering HomeView\");\n        return /*#__PURE__*/_jsxDEV(HomeView, {\n          setView: setView,\n          myQuizzes: myQuizzes,\n          setCreatedQuizCode: setCreatedQuizCode,\n          userId: userId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 24\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 text-white min-h-screen flex flex-col items-center justify-center p-4 font-sans\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-4xl mx-auto\",\n      children: renderView()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"SNrNTkaNiaBgJ665RXnbUxgzPQw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","auth","db","appId","onAuthStateChanged","signInAnonymously","doc","onSnapshot","collection","query","HomeView","CreateQuizView","AttemptQuizView","LobbyView","QuizView","ResultsView","LoadingSpinner","jsxDEV","_jsxDEV","App","_s","view","setView","userId","setUserId","isAuthReady","setIsAuthReady","quizCode","setQuizCode","createdQuizCode","setCreatedQuizCode","currentQuiz","setCurrentQuiz","players","setPlayers","error","setError","myQuizzes","setMyQuizzes","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","quizResults","setQuizResults","unsubscribe","user","uid","console","quizzesCollectionPath","q","querySnapshot","userQuizzes","forEach","push","id","data","err","lobbyDocPath","docSnap","exists","quizData","log","demoQuiz","title","questions","text","options","status","createdBy","name","quizDocPath","results","renderView","fileName","_jsxFileName","lineNumber","columnNumber","quiz","className","children","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/quiz app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { auth, db, appId } from './firebase/config';\r\nimport { onAuthStateChanged, signInAnonymously } from 'firebase/auth';\r\nimport { doc, onSnapshot, collection, query } from 'firebase/firestore';\r\n\r\n// Import Views\r\nimport { HomeView } from './views/HomeView';\r\nimport { CreateQuizView } from './views/CreateQuizView';\r\nimport { AttemptQuizView } from './views/AttemptQuizView';\r\nimport { LobbyView } from './views/LobbyView';\r\nimport { QuizView } from './views/QuizView';\r\nimport { ResultsView } from './views/ResultsView';\r\n\r\n// Import Common Components\r\nimport { LoadingSpinner } from './components/common/LoadingSpinner';\r\n\r\n\r\nfunction App() {\r\n    const [view, setView] = useState('home');\r\n    const [userId, setUserId] = useState(null);\r\n    const [isAuthReady, setIsAuthReady] = useState(false);\r\n    const [quizCode, setQuizCode] = useState('');\r\n    const [createdQuizCode, setCreatedQuizCode] = useState(null);\r\n    const [currentQuiz, setCurrentQuiz] = useState(null);\r\n    const [players, setPlayers] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [myQuizzes, setMyQuizzes] = useState([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [quizResults, setQuizResults] = useState(null);\r\n\r\n    // --- Authentication Effect ---\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n            if (user) {\r\n                setUserId(user.uid);\r\n            } else {\r\n                try {\r\n                    // For demo purposes, we'll use anonymous authentication\r\n                    await signInAnonymously(auth);\r\n                } catch (error) {\r\n                    console.error(\"Authentication failed:\", error);\r\n                    setError(\"Could not connect to the service. Please refresh.\");\r\n                }\r\n            }\r\n            setIsAuthReady(true);\r\n        });\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    // --- Fetch User's Quizzes Effect ---\r\n    useEffect(() => {\r\n        if (!isAuthReady || !userId) return;\r\n\r\n        const quizzesCollectionPath = `/artifacts/${appId}/users/${userId}/quizzes`;\r\n        const q = query(collection(db, quizzesCollectionPath));\r\n        \r\n        const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n            const userQuizzes = [];\r\n            querySnapshot.forEach((doc) => {\r\n                userQuizzes.push({ id: doc.id, ...doc.data() });\r\n            });\r\n            setMyQuizzes(userQuizzes);\r\n        }, (err) => {\r\n            console.error(\"Error fetching user quizzes:\", err);\r\n            setError(\"Could not load your quizzes.\");\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [isAuthReady, userId]);\r\n    \r\n    // --- Lobby Snapshot Effect ---\r\n    useEffect(() => {\r\n        if (view !== 'lobby' || !createdQuizCode) return;\r\n\r\n        const lobbyDocPath = `/artifacts/${appId}/public/data/quizzes/${createdQuizCode}`;\r\n        const unsubscribe = onSnapshot(doc(db, lobbyDocPath), (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const quizData = docSnap.data();\r\n                setCurrentQuiz(quizData);\r\n                setPlayers(quizData.players || []);\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [view, createdQuizCode]);\r\n\r\n    // --- Quiz Attempt Snapshot Effect ---\r\n    useEffect(() => {\r\n        if (view !== 'quiz' || !quizCode) return;\r\n\r\n        // Handle demo quizzes\r\n        if (quizCode === 'DEMO' || quizCode === 'TEST') {\r\n            console.log(\"Setting up demo quiz data\");\r\n            const demoQuiz = {\r\n                title: \"Demo Quiz\",\r\n                questions: [\r\n                    {\r\n                        text: \"What is the capital of France?\",\r\n                        options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"]\r\n                    },\r\n                    {\r\n                        text: \"Which planet is known as the Red Planet?\",\r\n                        options: [\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"]\r\n                    },\r\n                    {\r\n                        text: \"What is 2 + 2?\",\r\n                        options: [\"3\", \"4\", \"5\", \"6\"]\r\n                    }\r\n                ],\r\n                status: 'active', // Set to active so the quiz can start\r\n                currentQuestionIndex: 0,\r\n                createdBy: userId,\r\n                players: [\r\n                    { id: userId, name: \"You\" },\r\n                    { id: \"demo-player-1\", name: \"Demo Player 1\" },\r\n                    { id: \"demo-player-2\", name: \"Demo Player 2\" }\r\n                ]\r\n            };\r\n            setCurrentQuiz(demoQuiz);\r\n            setCurrentQuestionIndex(0);\r\n            return;\r\n        }\r\n\r\n        const quizDocPath = `/artifacts/${appId}/public/data/quizzes/${quizCode}`;\r\n        const unsubscribe = onSnapshot(doc(db, quizDocPath), (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const quizData = docSnap.data();\r\n                setCurrentQuiz(quizData);\r\n                setCurrentQuestionIndex(quizData.currentQuestionIndex || 0);\r\n                if (quizData.status === 'finished') {\r\n                    setQuizResults(quizData.results);\r\n                    setView('results');\r\n                }\r\n            } else {\r\n                setError(\"This quiz does not exist or has been closed.\");\r\n                setView('attempt');\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [view, quizCode, userId]);\r\n\r\n\r\n    // --- Component Rendering Logic (Router) ---\r\n    const renderView = () => {\r\n        console.log(\"Current view:\", view);\r\n        console.log(\"Auth ready:\", isAuthReady);\r\n        console.log(\"User ID:\", userId);\r\n        \r\n        if (!isAuthReady) {\r\n            return <LoadingSpinner />;\r\n        }\r\n        switch (view) {\r\n            case 'create':\r\n                console.log(\"Rendering CreateQuizView\");\r\n                return <CreateQuizView setView={setView} userId={userId} setCreatedQuizCode={setCreatedQuizCode} />;\r\n            case 'attempt':\r\n                return <AttemptQuizView setView={setView} setQuizCode={setQuizCode} setError={setError} error={error} userId={userId} />;\r\n            case 'lobby':\r\n                console.log(\"Rendering LobbyView with quizCode:\", createdQuizCode);\r\n                return <LobbyView setView={setView} quizCode={createdQuizCode} players={players} currentQuiz={currentQuiz} />;\r\n            case 'quiz':\r\n                return <QuizView \r\n                    quiz={currentQuiz} \r\n                    userId={userId} \r\n                    quizCode={quizCode} \r\n                    currentQuestionIndex={currentQuestionIndex} \r\n                    selectedAnswer={selectedAnswer} \r\n                    setSelectedAnswer={setSelectedAnswer}\r\n                    setCurrentQuiz={setCurrentQuiz}\r\n                    setView={setView}\r\n                    setQuizResults={setQuizResults}\r\n                />;\r\n            case 'results':\r\n                return <ResultsView results={quizResults} setView={setView} />;\r\n            default:\r\n                console.log(\"Rendering HomeView\");\r\n                return <HomeView setView={setView} myQuizzes={myQuizzes} setCreatedQuizCode={setCreatedQuizCode} userId={userId} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-gray-900 text-white min-h-screen flex flex-col items-center justify-center p-4 font-sans\">\r\n            <div className=\"w-full max-w-4xl mx-auto\">\r\n                {renderView()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}