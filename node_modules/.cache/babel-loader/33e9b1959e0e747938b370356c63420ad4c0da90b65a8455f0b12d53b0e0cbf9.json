{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\quiz app\\\\src\\\\views\\\\QuizView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\n// Firebase imports removed for local/demo mode\n// import { db, appId } from '../firebase/config';\n// import { doc, setDoc, getDoc, collection, getDocs, updateDoc } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuizView = ({\n  quiz,\n  userId,\n  quizCode,\n  currentQuestionIndex,\n  selectedAnswer,\n  setSelectedAnswer,\n  setCurrentQuiz,\n  setView,\n  setQuizResults,\n  setCurrentQuestionIndex,\n  setLocalQuizzes,\n  localQuizzes,\n  playerName,\n  userAnswers,\n  setUserAnswers\n}) => {\n  _s();\n  const isHost = (quiz === null || quiz === void 0 ? void 0 : quiz.createdBy) === userId;\n  useEffect(() => {\n    setSelectedAnswer(null);\n  }, [currentQuestionIndex, setSelectedAnswer]);\n  if (!quiz || quiz.status === 'lobby' || !quiz.questions || !quiz.questions[currentQuestionIndex]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-2xl\",\n      children: \"Waiting for the quiz to start...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  }\n  const question = quiz.questions[currentQuestionIndex];\n  const handleAnswerSubmit = optionIndex => {\n    setSelectedAnswer(optionIndex);\n\n    // Store the user's answer for score calculation\n    setUserAnswers(prev => ({\n      ...prev,\n      [currentQuestionIndex]: optionIndex\n    }));\n    console.log(\"Answer submitted:\", optionIndex, \"for question\", currentQuestionIndex + 1);\n\n    // All quiz modes now work locally - no Firebase operations needed\n  };\n  const handleNextQuestion = async () => {\n    console.log(\"=== BUTTON CLICKED - DEBUG INFO ===\");\n    console.log(\"Button clicked! Function parameters check:\");\n    console.log(\"setQuizResults:\", typeof setQuizResults);\n    console.log(\"setView:\", typeof setView);\n    console.log(\"setCurrentQuiz:\", typeof setCurrentQuiz);\n    console.log(\"setCurrentQuestionIndex:\", typeof setCurrentQuestionIndex);\n    console.log(\"userAnswers:\", userAnswers);\n    console.log(\"quiz:\", quiz);\n    console.log(\"=====================================\");\n    const nextIndex = currentQuestionIndex + 1;\n    console.log(\"handleNextQuestion called\", {\n      nextIndex,\n      totalQuestions: quiz.questions.length,\n      quizCode,\n      isDemo: quizCode === 'DEMO' || quizCode === 'TEST',\n      isLocal: localQuizzes && localQuizzes[quizCode],\n      isHost,\n      userId: userId,\n      createdBy: quiz === null || quiz === void 0 ? void 0 : quiz.createdBy\n    });\n\n    // Handle demo mode and local quizzes\n    if (quizCode === 'DEMO' || quizCode === 'TEST' || localQuizzes && localQuizzes[quizCode]) {\n      if (nextIndex < quiz.questions.length) {\n        console.log(\"Moving to next question:\", nextIndex + 1);\n        // Update the quiz state locally for demo mode and local quizzes\n        const updatedQuiz = {\n          ...quiz,\n          currentQuestionIndex: nextIndex\n        };\n        setCurrentQuiz(updatedQuiz);\n        setCurrentQuestionIndex(nextIndex);\n        setSelectedAnswer(null);\n\n        // If it's a local quiz, update the stored data too\n        if (localQuizzes && localQuizzes[quizCode]) {\n          setLocalQuizzes(prevQuizzes => ({\n            ...prevQuizzes,\n            [quizCode]: updatedQuiz\n          }));\n        }\n        console.log(\"Local/Demo mode: Moving to question\", nextIndex + 1);\n      } else {\n        console.log(\"Quiz finished, calculating results\");\n        // Calculate real scores based on user answers\n        let userScore = 0;\n        quiz.questions.forEach((question, index) => {\n          if (question.correctAnswer !== undefined && userAnswers[index] === question.correctAnswer) {\n            userScore++;\n          }\n        });\n        console.log(\"User score:\", userScore, \"out of\", quiz.questions.length);\n        const realResults = {\n          scores: [{\n            name: playerName || \"You\",\n            score: userScore\n          }, {\n            name: \"Demo Player 1\",\n            score: Math.floor(Math.random() * quiz.questions.length)\n          }, {\n            name: \"Demo Player 2\",\n            score: Math.floor(Math.random() * quiz.questions.length)\n          }],\n          totalQuestions: quiz.questions.length\n        };\n        realResults.scores.sort((a, b) => b.score - a.score);\n        setQuizResults(realResults);\n        setView('results');\n        console.log(\"Local/Demo mode: Quiz finished, showing results with real scores\");\n      }\n      return;\n    }\n\n    // Firebase fallback (disabled for local/demo mode)\n    /*\r\n    if (nextIndex < quiz.questions.length) {\r\n        await updateDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`), {\r\n            currentQuestionIndex: nextIndex\r\n        });\r\n    } else {\r\n        await calculateAndShowResults();\r\n    }\r\n    */\n  };\n\n  // Firebase function disabled for local/demo mode\n  /*\r\n  const calculateAndShowResults = async () => {\r\n      const privateQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/users/${quiz.createdBy}/quizzes/${quizCode}`));\r\n      if (!privateQuizDoc.exists()) {\r\n          console.error(\"Could not find original quiz data to calculate results.\");\r\n          return;\r\n      }\r\n      const correctAnswers = privateQuizDoc.data().questions.map(q => q.correctAnswer);\r\n        const answersSnapshot = await getDocs(collection(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}/answers`));\r\n      const submittedAnswers = answersSnapshot.docs.map(d => d.data());\r\n        const publicQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`));\r\n      const players = publicQuizDoc.data().players;\r\n        const scores = players.map(player => {\r\n          const playerScore = submittedAnswers\r\n              .filter(ans => ans.userId === player.id && correctAnswers[ans.questionIndex] === ans.answer)\r\n              .length;\r\n          return { name: player.name, score: playerScore };\r\n      });\r\n        scores.sort((a, b) => b.score - a.score);\r\n        await updateDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`), {\r\n          status: 'finished',\r\n          results: { scores, totalQuestions: quiz.questions.length }\r\n      });\r\n  };\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-3xl mx-auto text-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-800 p-8 rounded-lg shadow-2xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-cyan-400 font-bold\",\n          children: quiz.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bg-gray-700 text-white text-sm font-semibold px-3 py-1 rounded-full\",\n          children: [\"Question \", currentQuestionIndex + 1, \"/\", quiz.questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-3xl font-bold my-6 min-h-[80px]\",\n        children: question.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n        children: question.options.map((option, index) => {\n          const isSelected = selectedAnswer === index;\n          let buttonClass = \"bg-gray-700 hover:bg-gray-600\";\n          if (isSelected) {\n            buttonClass = \"bg-green-500 hover:bg-green-600\"; // Changed to green and allow hover\n          }\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAnswerSubmit(index),\n            className: `w-full text-left p-4 rounded-lg text-lg transition-all duration-200 ${buttonClass}`,\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), (isHost || quizCode === 'DEMO' || quizCode === 'TEST' || localQuizzes && localQuizzes[quizCode]) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-8\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextQuestion,\n          className: \"bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-8 rounded-lg text-lg transition-colors\",\n          children: currentQuestionIndex === quiz.questions.length - 1 ? 'Finish & Show Results' : 'Next Question'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this), !isHost && selectedAnswer !== null && !(quizCode === 'DEMO' || quizCode === 'TEST' || localQuizzes && localQuizzes[quizCode]) && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-8 text-gray-400\",\n        children: \"Your answer is submitted. Waiting for the host to proceed...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizView, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = QuizView;\nvar _c;\n$RefreshReg$(_c, \"QuizView\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","QuizView","quiz","userId","quizCode","currentQuestionIndex","selectedAnswer","setSelectedAnswer","setCurrentQuiz","setView","setQuizResults","setCurrentQuestionIndex","setLocalQuizzes","localQuizzes","playerName","userAnswers","setUserAnswers","_s","isHost","createdBy","status","questions","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question","handleAnswerSubmit","optionIndex","prev","console","log","handleNextQuestion","nextIndex","totalQuestions","length","isDemo","isLocal","updatedQuiz","prevQuizzes","userScore","forEach","index","correctAnswer","undefined","realResults","scores","name","score","Math","floor","random","sort","a","b","title","text","options","map","option","isSelected","buttonClass","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/quiz app/src/views/QuizView.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n// Firebase imports removed for local/demo mode\r\n// import { db, appId } from '../firebase/config';\r\n// import { doc, setDoc, getDoc, collection, getDocs, updateDoc } from 'firebase/firestore';\r\n\r\nexport const QuizView = ({ quiz, userId, quizCode, currentQuestionIndex, selectedAnswer, setSelectedAnswer, setCurrentQuiz, setView, setQuizResults, setCurrentQuestionIndex, setLocalQuizzes, localQuizzes, playerName, userAnswers, setUserAnswers }) => {\r\n    const isHost = quiz?.createdBy === userId;\r\n\r\n    useEffect(() => {\r\n        setSelectedAnswer(null);\r\n    }, [currentQuestionIndex, setSelectedAnswer]);\r\n\r\n    if (!quiz || quiz.status === 'lobby' || !quiz.questions || !quiz.questions[currentQuestionIndex]) {\r\n        return <div className=\"text-center text-2xl\">Waiting for the quiz to start...</div>;\r\n    }\r\n    \r\n    const question = quiz.questions[currentQuestionIndex];\r\n\r\n    const handleAnswerSubmit = (optionIndex) => {\r\n        setSelectedAnswer(optionIndex);\r\n        \r\n        // Store the user's answer for score calculation\r\n        setUserAnswers(prev => ({\r\n            ...prev,\r\n            [currentQuestionIndex]: optionIndex\r\n        }));\r\n        \r\n        console.log(\"Answer submitted:\", optionIndex, \"for question\", currentQuestionIndex + 1);\r\n        \r\n        // All quiz modes now work locally - no Firebase operations needed\r\n    };\r\n\r\n    const handleNextQuestion = async () => {\r\n        console.log(\"=== BUTTON CLICKED - DEBUG INFO ===\");\r\n        console.log(\"Button clicked! Function parameters check:\");\r\n        console.log(\"setQuizResults:\", typeof setQuizResults);\r\n        console.log(\"setView:\", typeof setView);\r\n        console.log(\"setCurrentQuiz:\", typeof setCurrentQuiz);\r\n        console.log(\"setCurrentQuestionIndex:\", typeof setCurrentQuestionIndex);\r\n        console.log(\"userAnswers:\", userAnswers);\r\n        console.log(\"quiz:\", quiz);\r\n        console.log(\"=====================================\");\r\n        \r\n        const nextIndex = currentQuestionIndex + 1;\r\n        \r\n        console.log(\"handleNextQuestion called\", {\r\n            nextIndex,\r\n            totalQuestions: quiz.questions.length,\r\n            quizCode,\r\n            isDemo: quizCode === 'DEMO' || quizCode === 'TEST',\r\n            isLocal: localQuizzes && localQuizzes[quizCode],\r\n            isHost,\r\n            userId: userId,\r\n            createdBy: quiz?.createdBy\r\n        });\r\n        \r\n        // Handle demo mode and local quizzes\r\n        if (quizCode === 'DEMO' || quizCode === 'TEST' || (localQuizzes && localQuizzes[quizCode])) {\r\n            if (nextIndex < quiz.questions.length) {\r\n                console.log(\"Moving to next question:\", nextIndex + 1);\r\n                // Update the quiz state locally for demo mode and local quizzes\r\n                const updatedQuiz = { ...quiz, currentQuestionIndex: nextIndex };\r\n                setCurrentQuiz(updatedQuiz);\r\n                setCurrentQuestionIndex(nextIndex);\r\n                setSelectedAnswer(null);\r\n                \r\n                // If it's a local quiz, update the stored data too\r\n                if (localQuizzes && localQuizzes[quizCode]) {\r\n                    setLocalQuizzes(prevQuizzes => ({\r\n                        ...prevQuizzes,\r\n                        [quizCode]: updatedQuiz\r\n                    }));\r\n                }\r\n                \r\n                console.log(\"Local/Demo mode: Moving to question\", nextIndex + 1);\r\n            } else {\r\n                console.log(\"Quiz finished, calculating results\");\r\n                // Calculate real scores based on user answers\r\n                let userScore = 0;\r\n                quiz.questions.forEach((question, index) => {\r\n                    if (question.correctAnswer !== undefined && userAnswers[index] === question.correctAnswer) {\r\n                        userScore++;\r\n                    }\r\n                });\r\n                \r\n                console.log(\"User score:\", userScore, \"out of\", quiz.questions.length);\r\n                \r\n                const realResults = {\r\n                    scores: [\r\n                        { name: playerName || \"You\", score: userScore },\r\n                        { name: \"Demo Player 1\", score: Math.floor(Math.random() * quiz.questions.length) },\r\n                        { name: \"Demo Player 2\", score: Math.floor(Math.random() * quiz.questions.length) }\r\n                    ],\r\n                    totalQuestions: quiz.questions.length\r\n                };\r\n                realResults.scores.sort((a, b) => b.score - a.score);\r\n                setQuizResults(realResults);\r\n                setView('results');\r\n                console.log(\"Local/Demo mode: Quiz finished, showing results with real scores\");\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // Firebase fallback (disabled for local/demo mode)\r\n        /*\r\n        if (nextIndex < quiz.questions.length) {\r\n            await updateDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`), {\r\n                currentQuestionIndex: nextIndex\r\n            });\r\n        } else {\r\n            await calculateAndShowResults();\r\n        }\r\n        */\r\n    };\r\n    \r\n    // Firebase function disabled for local/demo mode\r\n    /*\r\n    const calculateAndShowResults = async () => {\r\n        const privateQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/users/${quiz.createdBy}/quizzes/${quizCode}`));\r\n        if (!privateQuizDoc.exists()) {\r\n            console.error(\"Could not find original quiz data to calculate results.\");\r\n            return;\r\n        }\r\n        const correctAnswers = privateQuizDoc.data().questions.map(q => q.correctAnswer);\r\n\r\n        const answersSnapshot = await getDocs(collection(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}/answers`));\r\n        const submittedAnswers = answersSnapshot.docs.map(d => d.data());\r\n\r\n        const publicQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`));\r\n        const players = publicQuizDoc.data().players;\r\n\r\n        const scores = players.map(player => {\r\n            const playerScore = submittedAnswers\r\n                .filter(ans => ans.userId === player.id && correctAnswers[ans.questionIndex] === ans.answer)\r\n                .length;\r\n            return { name: player.name, score: playerScore };\r\n        });\r\n\r\n        scores.sort((a, b) => b.score - a.score);\r\n\r\n        await updateDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`), {\r\n            status: 'finished',\r\n            results: { scores, totalQuestions: quiz.questions.length }\r\n        });\r\n    };\r\n    */\r\n\r\n    return (\r\n        <div className=\"w-full max-w-3xl mx-auto text-center\">\r\n            <div className=\"bg-gray-800 p-8 rounded-lg shadow-2xl\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                    <span className=\"text-cyan-400 font-bold\">{quiz.title}</span>\r\n                    <span className=\"bg-gray-700 text-white text-sm font-semibold px-3 py-1 rounded-full\">Question {currentQuestionIndex + 1}/{quiz.questions.length}</span>\r\n                </div>\r\n                <h2 className=\"text-3xl font-bold my-6 min-h-[80px]\">{question.text}</h2>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    {question.options.map((option, index) => {\r\n                        const isSelected = selectedAnswer === index;\r\n                        \r\n                        let buttonClass = \"bg-gray-700 hover:bg-gray-600\";\r\n                        if (isSelected) {\r\n                            buttonClass = \"bg-green-500 hover:bg-green-600\"; // Changed to green and allow hover\r\n                        }\r\n\r\n                        return (\r\n                            <button\r\n                                key={index}\r\n                                onClick={() => handleAnswerSubmit(index)}\r\n                                className={`w-full text-left p-4 rounded-lg text-lg transition-all duration-200 ${buttonClass}`}\r\n                            >\r\n                                {option}\r\n                            </button>\r\n                        );\r\n                    })}\r\n                </div>\r\n                {/* For demo/local quizzes, allow anyone to proceed. For real quizzes, only host controls */}\r\n                {(isHost || quizCode === 'DEMO' || quizCode === 'TEST' || (localQuizzes && localQuizzes[quizCode])) && (\r\n                    <div className=\"mt-8\">\r\n                        <button \r\n                            onClick={handleNextQuestion} \r\n                            className=\"bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-8 rounded-lg text-lg transition-colors\"\r\n                        >\r\n                            {currentQuestionIndex === quiz.questions.length - 1 ? 'Finish & Show Results' : 'Next Question'}\r\n                        </button>\r\n                    </div>\r\n                )}\r\n                {!isHost && selectedAnswer !== null && !(quizCode === 'DEMO' || quizCode === 'TEST' || (localQuizzes && localQuizzes[quizCode])) && (\r\n                    <p className=\"mt-8 text-gray-400\">Your answer is submitted. Waiting for the host to proceed...</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}