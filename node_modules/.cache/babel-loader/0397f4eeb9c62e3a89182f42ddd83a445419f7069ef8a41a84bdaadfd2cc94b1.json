{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\quiz app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// import { auth, db, appId } from './firebase/config';\n// import { onAuthStateChanged, signInAnonymously } from 'firebase/auth';\n// import { doc, onSnapshot } from 'firebase/firestore';\n// import { db, appId } from './firebase/config';\n\n// Import Views\nimport { HomeView } from './views/HomeView';\nimport { CreateQuizView } from './views/CreateQuizView';\nimport { AttemptQuizView } from './views/AttemptQuizView';\nimport { LobbyView } from './views/LobbyView';\nimport { QuizView } from './views/QuizView';\nimport { ResultsView } from './views/ResultsView';\nimport { QuizLibrary } from './views/QuizLibrary';\n\n// Import Common Components\nimport { LoadingSpinner } from './components/common/LoadingSpinner';\nimport { DemoAuth } from './components/auth/DemoAuth';\n\n// Import Database utilities\nimport { getUserQuizzes, saveQuiz } from './utils/quizDatabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [view, setView] = useState('home');\n  const [userId, setUserId] = useState(null);\n  const [username, setUsername] = useState('');\n  const [isAuthReady, setIsAuthReady] = useState(false);\n  const [quizCode, setQuizCode] = useState('');\n  const [createdQuizCode, setCreatedQuizCode] = useState(null);\n  const [currentQuiz, setCurrentQuiz] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [error, setError] = useState('');\n  const [myQuizzes, setMyQuizzes] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [quizResults, setQuizResults] = useState(null);\n  const [localQuizzes, setLocalQuizzes] = useState({}); // Store created quizzes locally\n  const [playerName, setPlayerName] = useState(''); // Store player name for quizzes\n  const [userAnswers, setUserAnswers] = useState({}); // Store user's answers for score calculation\n  const [savedQuizzes, setSavedQuizzes] = useState({}); // Store permanently saved quizzes\n\n  // --- Authentication Effect ---\n  useEffect(() => {\n    const initializeApp = async () => {\n      console.log(\"Setting up demo authentication\");\n\n      // Check if user is already logged in\n      const currentUser = localStorage.getItem('quiz_app_current_user');\n      if (currentUser) {\n        try {\n          const user = JSON.parse(currentUser);\n          setUserId(user.id);\n          setUsername(user.username);\n          setPlayerName(user.username);\n          setIsAuthReady(true);\n\n          // Load saved quizzes from database\n          await loadSavedQuizzes(user.id);\n          console.log(\"Auto-logged in user:\", user.username);\n        } catch (error) {\n          console.error(\"Error parsing stored user:\", error);\n          localStorage.removeItem('quiz_app_current_user');\n          setIsAuthReady(true);\n        }\n      } else {\n        setIsAuthReady(true);\n      }\n    };\n    initializeApp();\n\n    // Commenting out Firebase auth for demo mode\n    /*\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n        if (user) {\r\n            setUserId(user.uid);\r\n        } else {\r\n            try {\r\n                // For demo purposes, we'll use anonymous authentication\r\n                await signInAnonymously(auth);\r\n            } catch (error) {\r\n                console.error(\"Authentication failed:\", error);\r\n                setError(\"Could not connect to the service. Please refresh.\");\r\n            }\r\n        }\r\n        setIsAuthReady(true);\r\n    });\r\n    return () => unsubscribe();\r\n    */\n  }, []);\n\n  // Load saved quizzes from database\n  const loadSavedQuizzes = async userId => {\n    if (userId) {\n      console.log(\"Loading saved quizzes for user:\", userId);\n      try {\n        const quizzes = await getUserQuizzes(userId);\n        console.log(\"Loaded quizzes:\", quizzes);\n        setSavedQuizzes(quizzes || {});\n        setMyQuizzes(Object.values(quizzes || {}));\n        console.log(\"Set myQuizzes to:\", Object.values(quizzes || {}));\n      } catch (error) {\n        console.error(\"Error loading saved quizzes:\", error);\n        setSavedQuizzes({});\n        setMyQuizzes([]);\n      }\n    }\n  };\n\n  // Save quiz to database\n  const saveQuizToDatabase = async (userId, quizId, quizData) => {\n    const success = await saveQuiz(userId, quizId, quizData);\n    if (success) {\n      await loadSavedQuizzes(userId);\n      console.log('Quiz saved to permanent database');\n    }\n    return success;\n  };\n\n  // --- Fetch User's Quizzes Effect ---\n  // Commented out since we're using local storage instead of Firebase\n  /*\r\n  useEffect(() => {\r\n      if (!isAuthReady || !userId) return;\r\n        const quizzesCollectionPath = `/artifacts/${appId}/users/${userId}/quizzes`;\r\n      const q = query(collection(db, quizzesCollectionPath));\r\n      \r\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n          const userQuizzes = [];\r\n          querySnapshot.forEach((doc) => {\r\n              userQuizzes.push({ id: doc.id, ...doc.data() });\r\n          });\r\n          setMyQuizzes(userQuizzes);\r\n      }, (err) => {\r\n          console.error(\"Error fetching user quizzes:\", err);\r\n          setError(\"Could not load your quizzes.\");\r\n      });\r\n        return () => unsubscribe();\r\n  }, [isAuthReady, userId]);\r\n  */\n\n  // --- Lobby Snapshot Effect ---\n  useEffect(() => {\n    if (view !== 'lobby' || !createdQuizCode) return;\n\n    // Handle locally created quizzes\n    if (localQuizzes && localQuizzes[createdQuizCode]) {\n      console.log(\"Loading local quiz for lobby:\", createdQuizCode);\n      const localQuiz = localQuizzes[createdQuizCode];\n      setCurrentQuiz(localQuiz);\n      setPlayers(localQuiz.players || []);\n      return;\n    }\n\n    // Handle saved quizzes from database\n    if (savedQuizzes && savedQuizzes[createdQuizCode]) {\n      console.log(\"Loading saved quiz for lobby:\", createdQuizCode);\n      const savedQuiz = savedQuizzes[createdQuizCode];\n      setCurrentQuiz(savedQuiz);\n      setPlayers(savedQuiz.players || []);\n      return;\n    }\n\n    // Firebase fallback disabled for local/demo mode\n    /*\r\n    const lobbyDocPath = `/artifacts/${appId}/public/data/quizzes/${createdQuizCode}`;\r\n    const unsubscribe = onSnapshot(doc(db, lobbyDocPath), (docSnap) => {\r\n        if (docSnap.exists()) {\r\n            const quizData = docSnap.data();\r\n            setCurrentQuiz(quizData);\r\n            setPlayers(quizData.players || []);\r\n        }\r\n    });\r\n      return () => unsubscribe();\r\n    */\n  }, [view, createdQuizCode, localQuizzes, savedQuizzes]);\n\n  // --- Quiz Attempt Snapshot Effect ---\n  useEffect(() => {\n    if (view !== 'quiz' || !quizCode) return;\n\n    // First, check if this is a locally created quiz\n    if (localQuizzes && localQuizzes[quizCode]) {\n      console.log(\"Loading local quiz:\", quizCode);\n      const localQuiz = {\n        ...localQuizzes[quizCode]\n      };\n      // Set status to active so the quiz can start\n      localQuiz.status = 'active';\n      setCurrentQuiz(localQuiz);\n      setCurrentQuestionIndex(localQuiz.currentQuestionIndex || 0);\n      setUserAnswers({}); // Reset user answers for new quiz\n      return;\n    }\n\n    // Check if this is a saved quiz from database\n    if (savedQuizzes && savedQuizzes[quizCode]) {\n      console.log(\"Loading saved quiz:\", quizCode);\n      const savedQuiz = {\n        ...savedQuizzes[quizCode]\n      };\n      // Set status to active so the quiz can start\n      savedQuiz.status = 'active';\n      setCurrentQuiz(savedQuiz);\n      setCurrentQuestionIndex(savedQuiz.currentQuestionIndex || 0);\n      setUserAnswers({}); // Reset user answers for new quiz\n      return;\n    }\n\n    // Handle demo quizzes\n    if (quizCode === 'DEMO' || quizCode === 'TEST') {\n      console.log(\"Setting up demo quiz data\");\n      setUserAnswers({}); // Reset user answers for new quiz\n      const demoQuiz = {\n        title: \"Demo Quiz\",\n        questions: [{\n          text: \"What is the capital of France?\",\n          options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\n          correctAnswer: 2 // Paris is the correct answer (index 2)\n        }, {\n          text: \"Which planet is known as the Red Planet?\",\n          options: [\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"],\n          correctAnswer: 1 // Mars is the correct answer (index 1)\n        }, {\n          text: \"What is 2 + 2?\",\n          options: [\"3\", \"4\", \"5\", \"6\"],\n          correctAnswer: 1 // 4 is the correct answer (index 1)\n        }],\n        status: 'active',\n        // Set to active so the quiz can start\n        currentQuestionIndex: 0,\n        createdBy: userId,\n        players: [{\n          id: userId,\n          name: playerName || \"You\"\n        }, {\n          id: \"demo-player-1\",\n          name: \"Demo Player 1\"\n        }, {\n          id: \"demo-player-2\",\n          name: \"Demo Player 2\"\n        }]\n      };\n      setCurrentQuiz(demoQuiz);\n      setCurrentQuestionIndex(0);\n      return;\n    }\n\n    // Firebase fallback disabled for local/demo mode\n    /*\r\n    const quizDocPath = `/artifacts/${appId}/public/data/quizzes/${quizCode}`;\r\n    const unsubscribe = onSnapshot(doc(db, quizDocPath), (docSnap) => {\r\n        if (docSnap.exists()) {\r\n            const quizData = docSnap.data();\r\n            setCurrentQuiz(quizData);\r\n            setCurrentQuestionIndex(quizData.currentQuestionIndex || 0);\r\n            if (quizData.status === 'finished') {\r\n                setQuizResults(quizData.results);\r\n                setView('results');\r\n            }\r\n        } else {\r\n            setError(\"This quiz does not exist or has been closed.\");\r\n            setView('attempt');\r\n        }\r\n    });\r\n      return () => unsubscribe();\r\n    */\n  }, [view, quizCode, userId, localQuizzes, playerName, savedQuizzes]);\n\n  // --- Component Rendering Logic (Router) ---\n  const renderView = () => {\n    console.log(\"Current view:\", view);\n    console.log(\"Auth ready:\", isAuthReady);\n    console.log(\"User ID:\", userId);\n    if (!isAuthReady) {\n      return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 20\n      }, this);\n    }\n\n    // Show authentication screen if no user is logged in\n    if (!userId) {\n      return /*#__PURE__*/_jsxDEV(DemoAuth, {\n        onLogin: handleDemoLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 20\n      }, this);\n    }\n    switch (view) {\n      case 'create':\n        console.log(\"Rendering CreateQuizView\");\n        return /*#__PURE__*/_jsxDEV(CreateQuizView, {\n          setView: setView,\n          userId: userId,\n          setCreatedQuizCode: setCreatedQuizCode,\n          setLocalQuizzes: setLocalQuizzes,\n          saveQuizToDatabase: saveQuizToDatabase\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 24\n        }, this);\n      case 'attempt':\n        return /*#__PURE__*/_jsxDEV(AttemptQuizView, {\n          setView: setView,\n          setQuizCode: setQuizCode,\n          setError: setError,\n          error: error,\n          userId: userId,\n          localQuizzes: localQuizzes,\n          savedQuizzes: savedQuizzes,\n          setPlayerName: setPlayerName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 24\n        }, this);\n      case 'lobby':\n        console.log(\"Rendering LobbyView with quizCode:\", createdQuizCode);\n        return /*#__PURE__*/_jsxDEV(LobbyView, {\n          setView: setView,\n          quizCode: createdQuizCode,\n          players: players,\n          currentQuiz: currentQuiz,\n          setQuizCode: setQuizCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 24\n        }, this);\n      case 'quiz':\n        return /*#__PURE__*/_jsxDEV(QuizView, {\n          quiz: currentQuiz,\n          userId: userId,\n          quizCode: quizCode,\n          currentQuestionIndex: currentQuestionIndex,\n          selectedAnswer: selectedAnswer,\n          setSelectedAnswer: setSelectedAnswer,\n          setCurrentQuiz: setCurrentQuiz,\n          setView: setView,\n          setQuizResults: setQuizResults,\n          setCurrentQuestionIndex: setCurrentQuestionIndex,\n          setLocalQuizzes: setLocalQuizzes,\n          localQuizzes: localQuizzes,\n          playerName: playerName,\n          userAnswers: userAnswers,\n          setUserAnswers: setUserAnswers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 24\n        }, this);\n      case 'library':\n        return /*#__PURE__*/_jsxDEV(QuizLibrary, {\n          setView: setView,\n          userId: userId,\n          setCreatedQuizCode: setCreatedQuizCode,\n          setQuizCode: setQuizCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 24\n        }, this);\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(ResultsView, {\n          results: quizResults,\n          setView: setView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 24\n        }, this);\n      default:\n        console.log(\"Rendering HomeView\");\n        return /*#__PURE__*/_jsxDEV(HomeView, {\n          setView: setView,\n          myQuizzes: myQuizzes,\n          setCreatedQuizCode: setCreatedQuizCode,\n          userId: userId,\n          loadSavedQuizzes: loadSavedQuizzes,\n          username: username,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 24\n        }, this);\n    }\n  };\n\n  // Handle demo login\n  const handleDemoLogin = async (userId, username) => {\n    setUserId(userId);\n    setUsername(username);\n    setPlayerName(username);\n\n    // Load saved quizzes from database\n    await loadSavedQuizzes(userId);\n    console.log(\"User logged in:\", username);\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    localStorage.removeItem('quiz_app_current_user');\n    setUserId(null);\n    setUsername('');\n    setPlayerName('');\n    setSavedQuizzes({});\n    setMyQuizzes([]);\n    setView('home');\n    console.log(\"User logged out\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 text-white min-h-screen flex flex-col items-center justify-center p-4 font-sans\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-4xl mx-auto\",\n      children: renderView()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"UIFU6owpIYXwouGc0unydRaexpU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","HomeView","CreateQuizView","AttemptQuizView","LobbyView","QuizView","ResultsView","QuizLibrary","LoadingSpinner","DemoAuth","getUserQuizzes","saveQuiz","jsxDEV","_jsxDEV","App","_s","view","setView","userId","setUserId","username","setUsername","isAuthReady","setIsAuthReady","quizCode","setQuizCode","createdQuizCode","setCreatedQuizCode","currentQuiz","setCurrentQuiz","players","setPlayers","error","setError","myQuizzes","setMyQuizzes","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","quizResults","setQuizResults","localQuizzes","setLocalQuizzes","playerName","setPlayerName","userAnswers","setUserAnswers","savedQuizzes","setSavedQuizzes","initializeApp","console","log","currentUser","localStorage","getItem","user","JSON","parse","id","loadSavedQuizzes","removeItem","quizzes","Object","values","saveQuizToDatabase","quizId","quizData","success","localQuiz","savedQuiz","status","demoQuiz","title","questions","text","options","correctAnswer","createdBy","name","renderView","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","handleDemoLogin","quiz","results","onLogout","handleLogout","className","children","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/quiz app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import { auth, db, appId } from './firebase/config';\r\n// import { onAuthStateChanged, signInAnonymously } from 'firebase/auth';\r\n// import { doc, onSnapshot } from 'firebase/firestore';\r\n// import { db, appId } from './firebase/config';\r\n\r\n// Import Views\r\nimport { HomeView } from './views/HomeView';\r\nimport { CreateQuizView } from './views/CreateQuizView';\r\nimport { AttemptQuizView } from './views/AttemptQuizView';\r\nimport { LobbyView } from './views/LobbyView';\r\nimport { QuizView } from './views/QuizView';\r\nimport { ResultsView } from './views/ResultsView';\r\nimport { QuizLibrary } from './views/QuizLibrary';\r\n\r\n// Import Common Components\r\nimport { LoadingSpinner } from './components/common/LoadingSpinner';\r\nimport { DemoAuth } from './components/auth/DemoAuth';\r\n\r\n// Import Database utilities\r\nimport { getUserQuizzes, saveQuiz } from './utils/quizDatabase';\r\n\r\n\r\nfunction App() {\r\n    const [view, setView] = useState('home');\r\n    const [userId, setUserId] = useState(null);\r\n    const [username, setUsername] = useState('');\r\n    const [isAuthReady, setIsAuthReady] = useState(false);\r\n    const [quizCode, setQuizCode] = useState('');\r\n    const [createdQuizCode, setCreatedQuizCode] = useState(null);\r\n    const [currentQuiz, setCurrentQuiz] = useState(null);\r\n    const [players, setPlayers] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [myQuizzes, setMyQuizzes] = useState([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [quizResults, setQuizResults] = useState(null);\r\n    const [localQuizzes, setLocalQuizzes] = useState({}); // Store created quizzes locally\r\n    const [playerName, setPlayerName] = useState(''); // Store player name for quizzes\r\n    const [userAnswers, setUserAnswers] = useState({}); // Store user's answers for score calculation\r\n    const [savedQuizzes, setSavedQuizzes] = useState({}); // Store permanently saved quizzes\r\n\r\n    // --- Authentication Effect ---\r\n    useEffect(() => {\r\n        const initializeApp = async () => {\r\n            console.log(\"Setting up demo authentication\");\r\n            \r\n            // Check if user is already logged in\r\n            const currentUser = localStorage.getItem('quiz_app_current_user');\r\n            if (currentUser) {\r\n                try {\r\n                    const user = JSON.parse(currentUser);\r\n                    setUserId(user.id);\r\n                    setUsername(user.username);\r\n                    setPlayerName(user.username);\r\n                    setIsAuthReady(true);\r\n                    \r\n                    // Load saved quizzes from database\r\n                    await loadSavedQuizzes(user.id);\r\n                    console.log(\"Auto-logged in user:\", user.username);\r\n                } catch (error) {\r\n                    console.error(\"Error parsing stored user:\", error);\r\n                    localStorage.removeItem('quiz_app_current_user');\r\n                    setIsAuthReady(true);\r\n                }\r\n            } else {\r\n                setIsAuthReady(true);\r\n            }\r\n        };\r\n        \r\n        initializeApp();\r\n        \r\n        // Commenting out Firebase auth for demo mode\r\n        /*\r\n        const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n            if (user) {\r\n                setUserId(user.uid);\r\n            } else {\r\n                try {\r\n                    // For demo purposes, we'll use anonymous authentication\r\n                    await signInAnonymously(auth);\r\n                } catch (error) {\r\n                    console.error(\"Authentication failed:\", error);\r\n                    setError(\"Could not connect to the service. Please refresh.\");\r\n                }\r\n            }\r\n            setIsAuthReady(true);\r\n        });\r\n        return () => unsubscribe();\r\n        */\r\n    }, []);\r\n\r\n    // Load saved quizzes from database\r\n    const loadSavedQuizzes = async (userId) => {\r\n        if (userId) {\r\n            console.log(\"Loading saved quizzes for user:\", userId);\r\n            try {\r\n                const quizzes = await getUserQuizzes(userId);\r\n                console.log(\"Loaded quizzes:\", quizzes);\r\n                setSavedQuizzes(quizzes || {});\r\n                setMyQuizzes(Object.values(quizzes || {}));\r\n                console.log(\"Set myQuizzes to:\", Object.values(quizzes || {}));\r\n            } catch (error) {\r\n                console.error(\"Error loading saved quizzes:\", error);\r\n                setSavedQuizzes({});\r\n                setMyQuizzes([]);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Save quiz to database\r\n    const saveQuizToDatabase = async (userId, quizId, quizData) => {\r\n        const success = await saveQuiz(userId, quizId, quizData);\r\n        if (success) {\r\n            await loadSavedQuizzes(userId);\r\n            console.log('Quiz saved to permanent database');\r\n        }\r\n        return success;\r\n    };\r\n\r\n    // --- Fetch User's Quizzes Effect ---\r\n    // Commented out since we're using local storage instead of Firebase\r\n    /*\r\n    useEffect(() => {\r\n        if (!isAuthReady || !userId) return;\r\n\r\n        const quizzesCollectionPath = `/artifacts/${appId}/users/${userId}/quizzes`;\r\n        const q = query(collection(db, quizzesCollectionPath));\r\n        \r\n        const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n            const userQuizzes = [];\r\n            querySnapshot.forEach((doc) => {\r\n                userQuizzes.push({ id: doc.id, ...doc.data() });\r\n            });\r\n            setMyQuizzes(userQuizzes);\r\n        }, (err) => {\r\n            console.error(\"Error fetching user quizzes:\", err);\r\n            setError(\"Could not load your quizzes.\");\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [isAuthReady, userId]);\r\n    */\r\n    \r\n    // --- Lobby Snapshot Effect ---\r\n    useEffect(() => {\r\n        if (view !== 'lobby' || !createdQuizCode) return;\r\n\r\n        // Handle locally created quizzes\r\n        if (localQuizzes && localQuizzes[createdQuizCode]) {\r\n            console.log(\"Loading local quiz for lobby:\", createdQuizCode);\r\n            const localQuiz = localQuizzes[createdQuizCode];\r\n            setCurrentQuiz(localQuiz);\r\n            setPlayers(localQuiz.players || []);\r\n            return;\r\n        }\r\n\r\n        // Handle saved quizzes from database\r\n        if (savedQuizzes && savedQuizzes[createdQuizCode]) {\r\n            console.log(\"Loading saved quiz for lobby:\", createdQuizCode);\r\n            const savedQuiz = savedQuizzes[createdQuizCode];\r\n            setCurrentQuiz(savedQuiz);\r\n            setPlayers(savedQuiz.players || []);\r\n            return;\r\n        }\r\n\r\n        // Firebase fallback disabled for local/demo mode\r\n        /*\r\n        const lobbyDocPath = `/artifacts/${appId}/public/data/quizzes/${createdQuizCode}`;\r\n        const unsubscribe = onSnapshot(doc(db, lobbyDocPath), (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const quizData = docSnap.data();\r\n                setCurrentQuiz(quizData);\r\n                setPlayers(quizData.players || []);\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n        */\r\n    }, [view, createdQuizCode, localQuizzes, savedQuizzes]);\r\n\r\n    // --- Quiz Attempt Snapshot Effect ---\r\n    useEffect(() => {\r\n        if (view !== 'quiz' || !quizCode) return;\r\n\r\n        // First, check if this is a locally created quiz\r\n        if (localQuizzes && localQuizzes[quizCode]) {\r\n            console.log(\"Loading local quiz:\", quizCode);\r\n            const localQuiz = { ...localQuizzes[quizCode] };\r\n            // Set status to active so the quiz can start\r\n            localQuiz.status = 'active';\r\n            setCurrentQuiz(localQuiz);\r\n            setCurrentQuestionIndex(localQuiz.currentQuestionIndex || 0);\r\n            setUserAnswers({}); // Reset user answers for new quiz\r\n            return;\r\n        }\r\n\r\n        // Check if this is a saved quiz from database\r\n        if (savedQuizzes && savedQuizzes[quizCode]) {\r\n            console.log(\"Loading saved quiz:\", quizCode);\r\n            const savedQuiz = { ...savedQuizzes[quizCode] };\r\n            // Set status to active so the quiz can start\r\n            savedQuiz.status = 'active';\r\n            setCurrentQuiz(savedQuiz);\r\n            setCurrentQuestionIndex(savedQuiz.currentQuestionIndex || 0);\r\n            setUserAnswers({}); // Reset user answers for new quiz\r\n            return;\r\n        }\r\n\r\n        // Handle demo quizzes\r\n        if (quizCode === 'DEMO' || quizCode === 'TEST') {\r\n            console.log(\"Setting up demo quiz data\");\r\n            setUserAnswers({}); // Reset user answers for new quiz\r\n            const demoQuiz = {\r\n                title: \"Demo Quiz\",\r\n                questions: [\r\n                    {\r\n                        text: \"What is the capital of France?\",\r\n                        options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\r\n                        correctAnswer: 2 // Paris is the correct answer (index 2)\r\n                    },\r\n                    {\r\n                        text: \"Which planet is known as the Red Planet?\",\r\n                        options: [\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"],\r\n                        correctAnswer: 1 // Mars is the correct answer (index 1)\r\n                    },\r\n                    {\r\n                        text: \"What is 2 + 2?\",\r\n                        options: [\"3\", \"4\", \"5\", \"6\"],\r\n                        correctAnswer: 1 // 4 is the correct answer (index 1)\r\n                    }\r\n                ],\r\n                status: 'active', // Set to active so the quiz can start\r\n                currentQuestionIndex: 0,\r\n                createdBy: userId,\r\n                players: [\r\n                    { id: userId, name: playerName || \"You\" },\r\n                    { id: \"demo-player-1\", name: \"Demo Player 1\" },\r\n                    { id: \"demo-player-2\", name: \"Demo Player 2\" }\r\n                ]\r\n            };\r\n            setCurrentQuiz(demoQuiz);\r\n            setCurrentQuestionIndex(0);\r\n            return;\r\n        }\r\n\r\n        // Firebase fallback disabled for local/demo mode\r\n        /*\r\n        const quizDocPath = `/artifacts/${appId}/public/data/quizzes/${quizCode}`;\r\n        const unsubscribe = onSnapshot(doc(db, quizDocPath), (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const quizData = docSnap.data();\r\n                setCurrentQuiz(quizData);\r\n                setCurrentQuestionIndex(quizData.currentQuestionIndex || 0);\r\n                if (quizData.status === 'finished') {\r\n                    setQuizResults(quizData.results);\r\n                    setView('results');\r\n                }\r\n            } else {\r\n                setError(\"This quiz does not exist or has been closed.\");\r\n                setView('attempt');\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n        */\r\n    }, [view, quizCode, userId, localQuizzes, playerName, savedQuizzes]);\r\n\r\n\r\n    // --- Component Rendering Logic (Router) ---\r\n    const renderView = () => {\r\n        console.log(\"Current view:\", view);\r\n        console.log(\"Auth ready:\", isAuthReady);\r\n        console.log(\"User ID:\", userId);\r\n        \r\n        if (!isAuthReady) {\r\n            return <LoadingSpinner />;\r\n        }\r\n\r\n        // Show authentication screen if no user is logged in\r\n        if (!userId) {\r\n            return <DemoAuth onLogin={handleDemoLogin} />;\r\n        }\r\n        \r\n        switch (view) {\r\n            case 'create':\r\n                console.log(\"Rendering CreateQuizView\");\r\n                return <CreateQuizView \r\n                    setView={setView} \r\n                    userId={userId} \r\n                    setCreatedQuizCode={setCreatedQuizCode} \r\n                    setLocalQuizzes={setLocalQuizzes}\r\n                    saveQuizToDatabase={saveQuizToDatabase}\r\n                />;\r\n            case 'attempt':\r\n                return <AttemptQuizView \r\n                    setView={setView} \r\n                    setQuizCode={setQuizCode} \r\n                    setError={setError} \r\n                    error={error} \r\n                    userId={userId} \r\n                    localQuizzes={localQuizzes}\r\n                    savedQuizzes={savedQuizzes}\r\n                    setPlayerName={setPlayerName} \r\n                />;\r\n            case 'lobby':\r\n                console.log(\"Rendering LobbyView with quizCode:\", createdQuizCode);\r\n                return <LobbyView setView={setView} quizCode={createdQuizCode} players={players} currentQuiz={currentQuiz} setQuizCode={setQuizCode} />;\r\n            case 'quiz':\r\n                return <QuizView \r\n                    quiz={currentQuiz} \r\n                    userId={userId} \r\n                    quizCode={quizCode} \r\n                    currentQuestionIndex={currentQuestionIndex} \r\n                    selectedAnswer={selectedAnswer} \r\n                    setSelectedAnswer={setSelectedAnswer}\r\n                    setCurrentQuiz={setCurrentQuiz}\r\n                    setView={setView}\r\n                    setQuizResults={setQuizResults}\r\n                    setCurrentQuestionIndex={setCurrentQuestionIndex}\r\n                    setLocalQuizzes={setLocalQuizzes}\r\n                    localQuizzes={localQuizzes}\r\n                    playerName={playerName}\r\n                    userAnswers={userAnswers}\r\n                    setUserAnswers={setUserAnswers}\r\n                />;\r\n            case 'library':\r\n                return <QuizLibrary \r\n                    setView={setView} \r\n                    userId={userId} \r\n                    setCreatedQuizCode={setCreatedQuizCode}\r\n                    setQuizCode={setQuizCode}\r\n                />;\r\n            case 'results':\r\n                return <ResultsView results={quizResults} setView={setView} />;\r\n            default:\r\n                console.log(\"Rendering HomeView\");\r\n                return <HomeView \r\n                    setView={setView} \r\n                    myQuizzes={myQuizzes} \r\n                    setCreatedQuizCode={setCreatedQuizCode} \r\n                    userId={userId} \r\n                    loadSavedQuizzes={loadSavedQuizzes}\r\n                    username={username}\r\n                    onLogout={handleLogout}\r\n                />;\r\n        }\r\n    };\r\n\r\n    // Handle demo login\r\n    const handleDemoLogin = async (userId, username) => {\r\n        setUserId(userId);\r\n        setUsername(username);\r\n        setPlayerName(username);\r\n        \r\n        // Load saved quizzes from database\r\n        await loadSavedQuizzes(userId);\r\n        console.log(\"User logged in:\", username);\r\n    };\r\n\r\n    // Handle logout\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('quiz_app_current_user');\r\n        setUserId(null);\r\n        setUsername('');\r\n        setPlayerName('');\r\n        setSavedQuizzes({});\r\n        setMyQuizzes([]);\r\n        setView('home');\r\n        console.log(\"User logged out\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-gray-900 text-white min-h-screen flex flex-col items-center justify-center p-4 font-sans\">\r\n            <div className=\"w-full max-w-4xl mx-auto\">\r\n                {renderView()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}