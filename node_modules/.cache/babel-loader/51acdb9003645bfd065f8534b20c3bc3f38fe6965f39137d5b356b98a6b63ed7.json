{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\quiz app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// import { auth, db, appId } from './firebase/config';\n// import { onAuthStateChanged, signInAnonymously } from 'firebase/auth';\nimport { doc, onSnapshot } from 'firebase/firestore';\nimport { db, appId } from './firebase/config';\n\n// Import Views\nimport { HomeView } from './views/HomeView';\nimport { CreateQuizView } from './views/CreateQuizView';\nimport { AttemptQuizView } from './views/AttemptQuizView';\nimport { LobbyView } from './views/LobbyView';\nimport { QuizView } from './views/QuizView';\nimport { ResultsView } from './views/ResultsView';\n\n// Import Common Components\nimport { LoadingSpinner } from './components/common/LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [view, setView] = useState('home');\n  const [userId, setUserId] = useState(null);\n  const [isAuthReady, setIsAuthReady] = useState(false);\n  const [quizCode, setQuizCode] = useState('');\n  const [createdQuizCode, setCreatedQuizCode] = useState(null);\n  const [currentQuiz, setCurrentQuiz] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [error, setError] = useState('');\n  const [myQuizzes, setMyQuizzes] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [quizResults, setQuizResults] = useState(null);\n  const [localQuizzes, setLocalQuizzes] = useState({}); // Store created quizzes locally\n  const [playerName, setPlayerName] = useState(''); // Store player name for quizzes\n\n  // --- Authentication Effect ---\n  useEffect(() => {\n    // For demo mode, we'll skip Firebase authentication and use a mock user ID\n    console.log(\"Setting up demo authentication\");\n    const demoUserId = `demo-user-${Math.random().toString(36).substr(2, 9)}`;\n    setUserId(demoUserId);\n    setIsAuthReady(true);\n\n    // Commenting out Firebase auth for demo mode\n    /*\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n        if (user) {\r\n            setUserId(user.uid);\r\n        } else {\r\n            try {\r\n                // For demo purposes, we'll use anonymous authentication\r\n                await signInAnonymously(auth);\r\n            } catch (error) {\r\n                console.error(\"Authentication failed:\", error);\r\n                setError(\"Could not connect to the service. Please refresh.\");\r\n            }\r\n        }\r\n        setIsAuthReady(true);\r\n    });\r\n    return () => unsubscribe();\r\n    */\n  }, []);\n\n  // --- Fetch User's Quizzes Effect ---\n  // Commented out since we're using local storage instead of Firebase\n  /*\r\n  useEffect(() => {\r\n      if (!isAuthReady || !userId) return;\r\n        const quizzesCollectionPath = `/artifacts/${appId}/users/${userId}/quizzes`;\r\n      const q = query(collection(db, quizzesCollectionPath));\r\n      \r\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n          const userQuizzes = [];\r\n          querySnapshot.forEach((doc) => {\r\n              userQuizzes.push({ id: doc.id, ...doc.data() });\r\n          });\r\n          setMyQuizzes(userQuizzes);\r\n      }, (err) => {\r\n          console.error(\"Error fetching user quizzes:\", err);\r\n          setError(\"Could not load your quizzes.\");\r\n      });\r\n        return () => unsubscribe();\r\n  }, [isAuthReady, userId]);\r\n  */\n\n  // --- Lobby Snapshot Effect ---\n  useEffect(() => {\n    if (view !== 'lobby' || !createdQuizCode) return;\n\n    // Handle locally created quizzes\n    if (localQuizzes && localQuizzes[createdQuizCode]) {\n      console.log(\"Loading local quiz for lobby:\", createdQuizCode);\n      const localQuiz = localQuizzes[createdQuizCode];\n      setCurrentQuiz(localQuiz);\n      setPlayers(localQuiz.players || []);\n      return;\n    }\n    const lobbyDocPath = `/artifacts/${appId}/public/data/quizzes/${createdQuizCode}`;\n    const unsubscribe = onSnapshot(doc(db, lobbyDocPath), docSnap => {\n      if (docSnap.exists()) {\n        const quizData = docSnap.data();\n        setCurrentQuiz(quizData);\n        setPlayers(quizData.players || []);\n      }\n    });\n    return () => unsubscribe();\n  }, [view, createdQuizCode, localQuizzes]);\n\n  // --- Quiz Attempt Snapshot Effect ---\n  useEffect(() => {\n    if (view !== 'quiz' || !quizCode) return;\n\n    // First, check if this is a locally created quiz\n    if (localQuizzes && localQuizzes[quizCode]) {\n      console.log(\"Loading local quiz:\", quizCode);\n      const localQuiz = {\n        ...localQuizzes[quizCode]\n      };\n      // Set status to active so the quiz can start\n      localQuiz.status = 'active';\n      setCurrentQuiz(localQuiz);\n      setCurrentQuestionIndex(localQuiz.currentQuestionIndex || 0);\n      return;\n    }\n\n    // Handle demo quizzes\n    if (quizCode === 'DEMO' || quizCode === 'TEST') {\n      console.log(\"Setting up demo quiz data\");\n      const demoQuiz = {\n        title: \"Demo Quiz\",\n        questions: [{\n          text: \"What is the capital of France?\",\n          options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\n          correctAnswer: 2 // Paris is the correct answer (index 2)\n        }, {\n          text: \"Which planet is known as the Red Planet?\",\n          options: [\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"],\n          correctAnswer: 1 // Mars is the correct answer (index 1)\n        }, {\n          text: \"What is 2 + 2?\",\n          options: [\"3\", \"4\", \"5\", \"6\"],\n          correctAnswer: 1 // 4 is the correct answer (index 1)\n        }],\n        status: 'active',\n        // Set to active so the quiz can start\n        currentQuestionIndex: 0,\n        createdBy: userId,\n        players: [{\n          id: userId,\n          name: playerName || \"You\"\n        }, {\n          id: \"demo-player-1\",\n          name: \"Demo Player 1\"\n        }, {\n          id: \"demo-player-2\",\n          name: \"Demo Player 2\"\n        }]\n      };\n      setCurrentQuiz(demoQuiz);\n      setCurrentQuestionIndex(0);\n      return;\n    }\n    const quizDocPath = `/artifacts/${appId}/public/data/quizzes/${quizCode}`;\n    const unsubscribe = onSnapshot(doc(db, quizDocPath), docSnap => {\n      if (docSnap.exists()) {\n        const quizData = docSnap.data();\n        setCurrentQuiz(quizData);\n        setCurrentQuestionIndex(quizData.currentQuestionIndex || 0);\n        if (quizData.status === 'finished') {\n          setQuizResults(quizData.results);\n          setView('results');\n        }\n      } else {\n        setError(\"This quiz does not exist or has been closed.\");\n        setView('attempt');\n      }\n    });\n    return () => unsubscribe();\n  }, [view, quizCode, userId, localQuizzes, playerName]);\n\n  // --- Component Rendering Logic (Router) ---\n  const renderView = () => {\n    console.log(\"Current view:\", view);\n    console.log(\"Auth ready:\", isAuthReady);\n    console.log(\"User ID:\", userId);\n    if (!isAuthReady) {\n      return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 20\n      }, this);\n    }\n    switch (view) {\n      case 'create':\n        console.log(\"Rendering CreateQuizView\");\n        return /*#__PURE__*/_jsxDEV(CreateQuizView, {\n          setView: setView,\n          userId: userId,\n          setCreatedQuizCode: setCreatedQuizCode,\n          setLocalQuizzes: setLocalQuizzes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 24\n        }, this);\n      case 'attempt':\n        return /*#__PURE__*/_jsxDEV(AttemptQuizView, {\n          setView: setView,\n          setQuizCode: setQuizCode,\n          setError: setError,\n          error: error,\n          userId: userId,\n          localQuizzes: localQuizzes,\n          setPlayerName: setPlayerName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 24\n        }, this);\n      case 'lobby':\n        console.log(\"Rendering LobbyView with quizCode:\", createdQuizCode);\n        return /*#__PURE__*/_jsxDEV(LobbyView, {\n          setView: setView,\n          quizCode: createdQuizCode,\n          players: players,\n          currentQuiz: currentQuiz,\n          setQuizCode: setQuizCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 24\n        }, this);\n      case 'quiz':\n        return /*#__PURE__*/_jsxDEV(QuizView, {\n          quiz: currentQuiz,\n          userId: userId,\n          quizCode: quizCode,\n          currentQuestionIndex: currentQuestionIndex,\n          selectedAnswer: selectedAnswer,\n          setSelectedAnswer: setSelectedAnswer,\n          setCurrentQuiz: setCurrentQuiz,\n          setView: setView,\n          setQuizResults: setQuizResults,\n          setCurrentQuestionIndex: setCurrentQuestionIndex,\n          setLocalQuizzes: setLocalQuizzes,\n          localQuizzes: localQuizzes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 24\n        }, this);\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(ResultsView, {\n          results: quizResults,\n          setView: setView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 24\n        }, this);\n      default:\n        console.log(\"Rendering HomeView\");\n        return /*#__PURE__*/_jsxDEV(HomeView, {\n          setView: setView,\n          myQuizzes: myQuizzes,\n          setCreatedQuizCode: setCreatedQuizCode,\n          userId: userId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 24\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 text-white min-h-screen flex flex-col items-center justify-center p-4 font-sans\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-4xl mx-auto\",\n      children: renderView()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"/+AQ+fyqUx7OlwVwC70zUEr3zFk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","doc","onSnapshot","db","appId","HomeView","CreateQuizView","AttemptQuizView","LobbyView","QuizView","ResultsView","LoadingSpinner","jsxDEV","_jsxDEV","App","_s","view","setView","userId","setUserId","isAuthReady","setIsAuthReady","quizCode","setQuizCode","createdQuizCode","setCreatedQuizCode","currentQuiz","setCurrentQuiz","players","setPlayers","error","setError","myQuizzes","setMyQuizzes","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","quizResults","setQuizResults","localQuizzes","setLocalQuizzes","playerName","setPlayerName","console","log","demoUserId","Math","random","toString","substr","localQuiz","lobbyDocPath","unsubscribe","docSnap","exists","quizData","data","status","demoQuiz","title","questions","text","options","correctAnswer","createdBy","id","name","quizDocPath","results","renderView","fileName","_jsxFileName","lineNumber","columnNumber","quiz","className","children","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/quiz app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import { auth, db, appId } from './firebase/config';\r\n// import { onAuthStateChanged, signInAnonymously } from 'firebase/auth';\r\nimport { doc, onSnapshot } from 'firebase/firestore';\r\nimport { db, appId } from './firebase/config';\r\n\r\n// Import Views\r\nimport { HomeView } from './views/HomeView';\r\nimport { CreateQuizView } from './views/CreateQuizView';\r\nimport { AttemptQuizView } from './views/AttemptQuizView';\r\nimport { LobbyView } from './views/LobbyView';\r\nimport { QuizView } from './views/QuizView';\r\nimport { ResultsView } from './views/ResultsView';\r\n\r\n// Import Common Components\r\nimport { LoadingSpinner } from './components/common/LoadingSpinner';\r\n\r\n\r\nfunction App() {\r\n    const [view, setView] = useState('home');\r\n    const [userId, setUserId] = useState(null);\r\n    const [isAuthReady, setIsAuthReady] = useState(false);\r\n    const [quizCode, setQuizCode] = useState('');\r\n    const [createdQuizCode, setCreatedQuizCode] = useState(null);\r\n    const [currentQuiz, setCurrentQuiz] = useState(null);\r\n    const [players, setPlayers] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [myQuizzes, setMyQuizzes] = useState([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [quizResults, setQuizResults] = useState(null);\r\n    const [localQuizzes, setLocalQuizzes] = useState({}); // Store created quizzes locally\r\n    const [playerName, setPlayerName] = useState(''); // Store player name for quizzes\r\n\r\n    // --- Authentication Effect ---\r\n    useEffect(() => {\r\n        // For demo mode, we'll skip Firebase authentication and use a mock user ID\r\n        console.log(\"Setting up demo authentication\");\r\n        const demoUserId = `demo-user-${Math.random().toString(36).substr(2, 9)}`;\r\n        setUserId(demoUserId);\r\n        setIsAuthReady(true);\r\n        \r\n        // Commenting out Firebase auth for demo mode\r\n        /*\r\n        const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n            if (user) {\r\n                setUserId(user.uid);\r\n            } else {\r\n                try {\r\n                    // For demo purposes, we'll use anonymous authentication\r\n                    await signInAnonymously(auth);\r\n                } catch (error) {\r\n                    console.error(\"Authentication failed:\", error);\r\n                    setError(\"Could not connect to the service. Please refresh.\");\r\n                }\r\n            }\r\n            setIsAuthReady(true);\r\n        });\r\n        return () => unsubscribe();\r\n        */\r\n    }, []);\r\n\r\n    // --- Fetch User's Quizzes Effect ---\r\n    // Commented out since we're using local storage instead of Firebase\r\n    /*\r\n    useEffect(() => {\r\n        if (!isAuthReady || !userId) return;\r\n\r\n        const quizzesCollectionPath = `/artifacts/${appId}/users/${userId}/quizzes`;\r\n        const q = query(collection(db, quizzesCollectionPath));\r\n        \r\n        const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n            const userQuizzes = [];\r\n            querySnapshot.forEach((doc) => {\r\n                userQuizzes.push({ id: doc.id, ...doc.data() });\r\n            });\r\n            setMyQuizzes(userQuizzes);\r\n        }, (err) => {\r\n            console.error(\"Error fetching user quizzes:\", err);\r\n            setError(\"Could not load your quizzes.\");\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [isAuthReady, userId]);\r\n    */\r\n    \r\n    // --- Lobby Snapshot Effect ---\r\n    useEffect(() => {\r\n        if (view !== 'lobby' || !createdQuizCode) return;\r\n\r\n        // Handle locally created quizzes\r\n        if (localQuizzes && localQuizzes[createdQuizCode]) {\r\n            console.log(\"Loading local quiz for lobby:\", createdQuizCode);\r\n            const localQuiz = localQuizzes[createdQuizCode];\r\n            setCurrentQuiz(localQuiz);\r\n            setPlayers(localQuiz.players || []);\r\n            return;\r\n        }\r\n\r\n        const lobbyDocPath = `/artifacts/${appId}/public/data/quizzes/${createdQuizCode}`;\r\n        const unsubscribe = onSnapshot(doc(db, lobbyDocPath), (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const quizData = docSnap.data();\r\n                setCurrentQuiz(quizData);\r\n                setPlayers(quizData.players || []);\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [view, createdQuizCode, localQuizzes]);\r\n\r\n    // --- Quiz Attempt Snapshot Effect ---\r\n    useEffect(() => {\r\n        if (view !== 'quiz' || !quizCode) return;\r\n\r\n        // First, check if this is a locally created quiz\r\n        if (localQuizzes && localQuizzes[quizCode]) {\r\n            console.log(\"Loading local quiz:\", quizCode);\r\n            const localQuiz = { ...localQuizzes[quizCode] };\r\n            // Set status to active so the quiz can start\r\n            localQuiz.status = 'active';\r\n            setCurrentQuiz(localQuiz);\r\n            setCurrentQuestionIndex(localQuiz.currentQuestionIndex || 0);\r\n            return;\r\n        }\r\n\r\n        // Handle demo quizzes\r\n        if (quizCode === 'DEMO' || quizCode === 'TEST') {\r\n            console.log(\"Setting up demo quiz data\");\r\n            const demoQuiz = {\r\n                title: \"Demo Quiz\",\r\n                questions: [\r\n                    {\r\n                        text: \"What is the capital of France?\",\r\n                        options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\r\n                        correctAnswer: 2 // Paris is the correct answer (index 2)\r\n                    },\r\n                    {\r\n                        text: \"Which planet is known as the Red Planet?\",\r\n                        options: [\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"],\r\n                        correctAnswer: 1 // Mars is the correct answer (index 1)\r\n                    },\r\n                    {\r\n                        text: \"What is 2 + 2?\",\r\n                        options: [\"3\", \"4\", \"5\", \"6\"],\r\n                        correctAnswer: 1 // 4 is the correct answer (index 1)\r\n                    }\r\n                ],\r\n                status: 'active', // Set to active so the quiz can start\r\n                currentQuestionIndex: 0,\r\n                createdBy: userId,\r\n                players: [\r\n                    { id: userId, name: playerName || \"You\" },\r\n                    { id: \"demo-player-1\", name: \"Demo Player 1\" },\r\n                    { id: \"demo-player-2\", name: \"Demo Player 2\" }\r\n                ]\r\n            };\r\n            setCurrentQuiz(demoQuiz);\r\n            setCurrentQuestionIndex(0);\r\n            return;\r\n        }\r\n\r\n        const quizDocPath = `/artifacts/${appId}/public/data/quizzes/${quizCode}`;\r\n        const unsubscribe = onSnapshot(doc(db, quizDocPath), (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const quizData = docSnap.data();\r\n                setCurrentQuiz(quizData);\r\n                setCurrentQuestionIndex(quizData.currentQuestionIndex || 0);\r\n                if (quizData.status === 'finished') {\r\n                    setQuizResults(quizData.results);\r\n                    setView('results');\r\n                }\r\n            } else {\r\n                setError(\"This quiz does not exist or has been closed.\");\r\n                setView('attempt');\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [view, quizCode, userId, localQuizzes, playerName]);\r\n\r\n\r\n    // --- Component Rendering Logic (Router) ---\r\n    const renderView = () => {\r\n        console.log(\"Current view:\", view);\r\n        console.log(\"Auth ready:\", isAuthReady);\r\n        console.log(\"User ID:\", userId);\r\n        \r\n        if (!isAuthReady) {\r\n            return <LoadingSpinner />;\r\n        }\r\n        switch (view) {\r\n            case 'create':\r\n                console.log(\"Rendering CreateQuizView\");\r\n                return <CreateQuizView setView={setView} userId={userId} setCreatedQuizCode={setCreatedQuizCode} setLocalQuizzes={setLocalQuizzes} />;\r\n            case 'attempt':\r\n                return <AttemptQuizView setView={setView} setQuizCode={setQuizCode} setError={setError} error={error} userId={userId} localQuizzes={localQuizzes} setPlayerName={setPlayerName} />;\r\n            case 'lobby':\r\n                console.log(\"Rendering LobbyView with quizCode:\", createdQuizCode);\r\n                return <LobbyView setView={setView} quizCode={createdQuizCode} players={players} currentQuiz={currentQuiz} setQuizCode={setQuizCode} />;\r\n            case 'quiz':\r\n                return <QuizView \r\n                    quiz={currentQuiz} \r\n                    userId={userId} \r\n                    quizCode={quizCode} \r\n                    currentQuestionIndex={currentQuestionIndex} \r\n                    selectedAnswer={selectedAnswer} \r\n                    setSelectedAnswer={setSelectedAnswer}\r\n                    setCurrentQuiz={setCurrentQuiz}\r\n                    setView={setView}\r\n                    setQuizResults={setQuizResults}\r\n                    setCurrentQuestionIndex={setCurrentQuestionIndex}\r\n                    setLocalQuizzes={setLocalQuizzes}\r\n                    localQuizzes={localQuizzes}\r\n                />;\r\n            case 'results':\r\n                return <ResultsView results={quizResults} setView={setView} />;\r\n            default:\r\n                console.log(\"Rendering HomeView\");\r\n                return <HomeView setView={setView} myQuizzes={myQuizzes} setCreatedQuizCode={setCreatedQuizCode} userId={userId} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-gray-900 text-white min-h-screen flex flex-col items-center justify-center p-4 font-sans\">\r\n            <div className=\"w-full max-w-4xl mx-auto\">\r\n                {renderView()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}