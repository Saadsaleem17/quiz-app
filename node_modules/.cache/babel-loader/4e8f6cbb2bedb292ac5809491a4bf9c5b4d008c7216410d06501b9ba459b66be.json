{"ast":null,"code":"// Quiz Database utility functions with MongoDB and localStorage fallback\n// This provides persistent storage for user quizzes\n\nconst QUIZ_STORAGE_KEY = 'quiz_app_user_quizzes';\nconst QUIZ_HISTORY_KEY = 'quiz_app_quiz_history';\n\n// MongoDB connection string\nconst MONGODB_URI = 'mongodb+srv://saadsaleem17oct:mmsMijMD1g9r1uyM@cluster0.xwdy0te.mongodb.net/quiz-app';\n\n// API base URL (you can change this to your backend URL when available)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Check if we're in demo mode or have API access\nconst isDemoMode = () => {\n  return !process.env.REACT_APP_API_URL || process.env.REACT_APP_DEMO_MODE === 'true';\n};\n\n// Get all saved quizzes for a user\nexport const getUserQuizzes = async userId => {\n  if (isDemoMode()) {\n    // Use localStorage for demo mode\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      return allQuizzes[userId] || {};\n    } catch (error) {\n      console.error('Error reading user quizzes from localStorage:', error);\n      return {};\n    }\n  }\n\n  // Use MongoDB API for production\n  try {\n    const response = await fetch(`${API_BASE_URL}/quizzes/user/${userId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const quizzes = await response.json();\n\n    // Convert array to object with quiz ID as key\n    const quizzesObject = {};\n    quizzes.forEach(quiz => {\n      quizzesObject[quiz.id] = quiz;\n    });\n    return quizzesObject;\n  } catch (error) {\n    console.error('Error fetching user quizzes from API:', error);\n    // Fallback to localStorage if API fails\n    try {\n      const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n      return allQuizzes[userId] || {};\n    } catch (localError) {\n      console.error('Error reading from localStorage fallback:', localError);\n      return {};\n    }\n  }\n};\n\n// Save a quiz for a user\nexport const saveQuiz = (userId, quizId, quizData) => {\n  try {\n    const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n    if (!allQuizzes[userId]) {\n      allQuizzes[userId] = {};\n    }\n\n    // Add metadata\n    const quizWithMetadata = {\n      ...quizData,\n      id: quizId,\n      savedAt: new Date().toISOString(),\n      lastUsed: new Date().toISOString(),\n      timesUsed: 0\n    };\n    allQuizzes[userId][quizId] = quizWithMetadata;\n    localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n    console.log('Quiz saved to database:', quizId);\n    return true;\n  } catch (error) {\n    console.error('Error saving quiz:', error);\n    return false;\n  }\n};\n\n// Delete a quiz\nexport const deleteQuiz = (userId, quizId) => {\n  try {\n    const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n    if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\n      delete allQuizzes[userId][quizId];\n      localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n      console.log('Quiz deleted from database:', quizId);\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('Error deleting quiz:', error);\n    return false;\n  }\n};\n\n// Update quiz usage (when someone starts the quiz)\nexport const updateQuizUsage = (userId, quizId) => {\n  try {\n    const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n    if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\n      allQuizzes[userId][quizId].lastUsed = new Date().toISOString();\n      allQuizzes[userId][quizId].timesUsed = (allQuizzes[userId][quizId].timesUsed || 0) + 1;\n      localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('Error updating quiz usage:', error);\n    return false;\n  }\n};\n\n// Get quiz statistics\nexport const getQuizStats = userId => {\n  try {\n    const userQuizzes = getUserQuizzes(userId);\n    const quizzes = Object.values(userQuizzes);\n    return {\n      totalQuizzes: quizzes.length,\n      totalQuestions: quizzes.reduce((sum, quiz) => {\n        var _quiz$questions;\n        return sum + (((_quiz$questions = quiz.questions) === null || _quiz$questions === void 0 ? void 0 : _quiz$questions.length) || 0);\n      }, 0),\n      mostUsedQuiz: quizzes.reduce((max, quiz) => (quiz.timesUsed || 0) > (max.timesUsed || 0) ? quiz : max, quizzes[0] || null),\n      recentQuizzes: quizzes.sort((a, b) => new Date(b.lastUsed) - new Date(a.lastUsed)).slice(0, 5)\n    };\n  } catch (error) {\n    console.error('Error getting quiz stats:', error);\n    return {\n      totalQuizzes: 0,\n      totalQuestions: 0,\n      mostUsedQuiz: null,\n      recentQuizzes: []\n    };\n  }\n};\n\n// Search quizzes by title\nexport const searchQuizzes = (userId, searchTerm) => {\n  try {\n    const userQuizzes = getUserQuizzes(userId);\n    const searchLower = searchTerm.toLowerCase();\n    const matchingQuizzes = Object.entries(userQuizzes).filter(([quizId, quiz]) => {\n      var _quiz$title;\n      return (_quiz$title = quiz.title) === null || _quiz$title === void 0 ? void 0 : _quiz$title.toLowerCase().includes(searchLower);\n    });\n    return Object.fromEntries(matchingQuizzes);\n  } catch (error) {\n    console.error('Error searching quizzes:', error);\n    return {};\n  }\n};\n\n// Export all user data (for backup)\nexport const exportUserData = userId => {\n  try {\n    const userQuizzes = getUserQuizzes(userId);\n    const stats = getQuizStats(userId);\n    return {\n      userId,\n      exportDate: new Date().toISOString(),\n      quizzes: userQuizzes,\n      stats\n    };\n  } catch (error) {\n    console.error('Error exporting user data:', error);\n    return null;\n  }\n};\n\n// Import user data (for restore)\nexport const importUserData = (userId, userData) => {\n  try {\n    const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n    allQuizzes[userId] = userData.quizzes;\n    localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n    console.log('User data imported successfully');\n    return true;\n  } catch (error) {\n    console.error('Error importing user data:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["QUIZ_STORAGE_KEY","QUIZ_HISTORY_KEY","MONGODB_URI","API_BASE_URL","process","env","REACT_APP_API_URL","isDemoMode","REACT_APP_DEMO_MODE","getUserQuizzes","userId","allQuizzes","JSON","parse","localStorage","getItem","error","console","response","fetch","ok","Error","status","quizzes","json","quizzesObject","forEach","quiz","id","localError","saveQuiz","quizId","quizData","quizWithMetadata","savedAt","Date","toISOString","lastUsed","timesUsed","setItem","stringify","log","deleteQuiz","updateQuizUsage","getQuizStats","userQuizzes","Object","values","totalQuizzes","length","totalQuestions","reduce","sum","_quiz$questions","questions","mostUsedQuiz","max","recentQuizzes","sort","a","b","slice","searchQuizzes","searchTerm","searchLower","toLowerCase","matchingQuizzes","entries","filter","_quiz$title","title","includes","fromEntries","exportUserData","stats","exportDate","importUserData","userData"],"sources":["C:/Users/ACER/Desktop/quiz app/src/utils/quizDatabase.js"],"sourcesContent":["// Quiz Database utility functions with MongoDB and localStorage fallback\r\n// This provides persistent storage for user quizzes\r\n\r\nconst QUIZ_STORAGE_KEY = 'quiz_app_user_quizzes';\r\nconst QUIZ_HISTORY_KEY = 'quiz_app_quiz_history';\r\n\r\n// MongoDB connection string\r\nconst MONGODB_URI = 'mongodb+srv://saadsaleem17oct:mmsMijMD1g9r1uyM@cluster0.xwdy0te.mongodb.net/quiz-app';\r\n\r\n// API base URL (you can change this to your backend URL when available)\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\n// Check if we're in demo mode or have API access\r\nconst isDemoMode = () => {\r\n    return !process.env.REACT_APP_API_URL || process.env.REACT_APP_DEMO_MODE === 'true';\r\n};\r\n\r\n// Get all saved quizzes for a user\r\nexport const getUserQuizzes = async (userId) => {\r\n    if (isDemoMode()) {\r\n        // Use localStorage for demo mode\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            return allQuizzes[userId] || {};\r\n        } catch (error) {\r\n            console.error('Error reading user quizzes from localStorage:', error);\r\n            return {};\r\n        }\r\n    }\r\n\r\n    // Use MongoDB API for production\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/quizzes/user/${userId}`);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const quizzes = await response.json();\r\n        \r\n        // Convert array to object with quiz ID as key\r\n        const quizzesObject = {};\r\n        quizzes.forEach(quiz => {\r\n            quizzesObject[quiz.id] = quiz;\r\n        });\r\n        \r\n        return quizzesObject;\r\n    } catch (error) {\r\n        console.error('Error fetching user quizzes from API:', error);\r\n        // Fallback to localStorage if API fails\r\n        try {\r\n            const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n            return allQuizzes[userId] || {};\r\n        } catch (localError) {\r\n            console.error('Error reading from localStorage fallback:', localError);\r\n            return {};\r\n        }\r\n    }\r\n};\r\n\r\n// Save a quiz for a user\r\nexport const saveQuiz = (userId, quizId, quizData) => {\r\n    try {\r\n        const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n        \r\n        if (!allQuizzes[userId]) {\r\n            allQuizzes[userId] = {};\r\n        }\r\n        \r\n        // Add metadata\r\n        const quizWithMetadata = {\r\n            ...quizData,\r\n            id: quizId,\r\n            savedAt: new Date().toISOString(),\r\n            lastUsed: new Date().toISOString(),\r\n            timesUsed: 0\r\n        };\r\n        \r\n        allQuizzes[userId][quizId] = quizWithMetadata;\r\n        localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n        \r\n        console.log('Quiz saved to database:', quizId);\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error saving quiz:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// Delete a quiz\r\nexport const deleteQuiz = (userId, quizId) => {\r\n    try {\r\n        const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n        \r\n        if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\r\n            delete allQuizzes[userId][quizId];\r\n            localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n            console.log('Quiz deleted from database:', quizId);\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    } catch (error) {\r\n        console.error('Error deleting quiz:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// Update quiz usage (when someone starts the quiz)\r\nexport const updateQuizUsage = (userId, quizId) => {\r\n    try {\r\n        const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n        \r\n        if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\r\n            allQuizzes[userId][quizId].lastUsed = new Date().toISOString();\r\n            allQuizzes[userId][quizId].timesUsed = (allQuizzes[userId][quizId].timesUsed || 0) + 1;\r\n            localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    } catch (error) {\r\n        console.error('Error updating quiz usage:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// Get quiz statistics\r\nexport const getQuizStats = (userId) => {\r\n    try {\r\n        const userQuizzes = getUserQuizzes(userId);\r\n        const quizzes = Object.values(userQuizzes);\r\n        \r\n        return {\r\n            totalQuizzes: quizzes.length,\r\n            totalQuestions: quizzes.reduce((sum, quiz) => sum + (quiz.questions?.length || 0), 0),\r\n            mostUsedQuiz: quizzes.reduce((max, quiz) => \r\n                (quiz.timesUsed || 0) > (max.timesUsed || 0) ? quiz : max, \r\n                quizzes[0] || null\r\n            ),\r\n            recentQuizzes: quizzes\r\n                .sort((a, b) => new Date(b.lastUsed) - new Date(a.lastUsed))\r\n                .slice(0, 5)\r\n        };\r\n    } catch (error) {\r\n        console.error('Error getting quiz stats:', error);\r\n        return {\r\n            totalQuizzes: 0,\r\n            totalQuestions: 0,\r\n            mostUsedQuiz: null,\r\n            recentQuizzes: []\r\n        };\r\n    }\r\n};\r\n\r\n// Search quizzes by title\r\nexport const searchQuizzes = (userId, searchTerm) => {\r\n    try {\r\n        const userQuizzes = getUserQuizzes(userId);\r\n        const searchLower = searchTerm.toLowerCase();\r\n        \r\n        const matchingQuizzes = Object.entries(userQuizzes).filter(([quizId, quiz]) => \r\n            quiz.title?.toLowerCase().includes(searchLower)\r\n        );\r\n        \r\n        return Object.fromEntries(matchingQuizzes);\r\n    } catch (error) {\r\n        console.error('Error searching quizzes:', error);\r\n        return {};\r\n    }\r\n};\r\n\r\n// Export all user data (for backup)\r\nexport const exportUserData = (userId) => {\r\n    try {\r\n        const userQuizzes = getUserQuizzes(userId);\r\n        const stats = getQuizStats(userId);\r\n        \r\n        return {\r\n            userId,\r\n            exportDate: new Date().toISOString(),\r\n            quizzes: userQuizzes,\r\n            stats\r\n        };\r\n    } catch (error) {\r\n        console.error('Error exporting user data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Import user data (for restore)\r\nexport const importUserData = (userId, userData) => {\r\n    try {\r\n        const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n        allQuizzes[userId] = userData.quizzes;\r\n        localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n        \r\n        console.log('User data imported successfully');\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error importing user data:', error);\r\n        return false;\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}