{"ast":null,"code":"// Quiz Database utility functions using localStorage\n// This provides persistent storage for user quizzes\n\nconst QUIZ_STORAGE_KEY = 'quiz_app_user_quizzes';\nconst QUIZ_HISTORY_KEY = 'quiz_app_quiz_history';\n\n// Get all saved quizzes for a user\nexport const getUserQuizzes = userId => {\n  try {\n    const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n    return allQuizzes[userId] || {};\n  } catch (error) {\n    console.error('Error reading user quizzes:', error);\n    return {};\n  }\n};\n\n// Save a quiz for a user\nexport const saveQuiz = (userId, quizId, quizData) => {\n  try {\n    const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n    if (!allQuizzes[userId]) {\n      allQuizzes[userId] = {};\n    }\n\n    // Add metadata\n    const quizWithMetadata = {\n      ...quizData,\n      id: quizId,\n      savedAt: new Date().toISOString(),\n      lastUsed: new Date().toISOString(),\n      timesUsed: 0\n    };\n    allQuizzes[userId][quizId] = quizWithMetadata;\n    localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n    console.log('Quiz saved to database:', quizId);\n    return true;\n  } catch (error) {\n    console.error('Error saving quiz:', error);\n    return false;\n  }\n};\n\n// Delete a quiz\nexport const deleteQuiz = (userId, quizId) => {\n  try {\n    const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n    if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\n      delete allQuizzes[userId][quizId];\n      localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n      console.log('Quiz deleted from database:', quizId);\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('Error deleting quiz:', error);\n    return false;\n  }\n};\n\n// Update quiz usage (when someone starts the quiz)\nexport const updateQuizUsage = (userId, quizId) => {\n  try {\n    const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n    if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\n      allQuizzes[userId][quizId].lastUsed = new Date().toISOString();\n      allQuizzes[userId][quizId].timesUsed = (allQuizzes[userId][quizId].timesUsed || 0) + 1;\n      localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('Error updating quiz usage:', error);\n    return false;\n  }\n};\n\n// Get quiz statistics\nexport const getQuizStats = userId => {\n  try {\n    const userQuizzes = getUserQuizzes(userId);\n    const quizzes = Object.values(userQuizzes);\n    return {\n      totalQuizzes: quizzes.length,\n      totalQuestions: quizzes.reduce((sum, quiz) => {\n        var _quiz$questions;\n        return sum + (((_quiz$questions = quiz.questions) === null || _quiz$questions === void 0 ? void 0 : _quiz$questions.length) || 0);\n      }, 0),\n      mostUsedQuiz: quizzes.reduce((max, quiz) => (quiz.timesUsed || 0) > (max.timesUsed || 0) ? quiz : max, quizzes[0] || null),\n      recentQuizzes: quizzes.sort((a, b) => new Date(b.lastUsed) - new Date(a.lastUsed)).slice(0, 5)\n    };\n  } catch (error) {\n    console.error('Error getting quiz stats:', error);\n    return {\n      totalQuizzes: 0,\n      totalQuestions: 0,\n      mostUsedQuiz: null,\n      recentQuizzes: []\n    };\n  }\n};\n\n// Search quizzes by title\nexport const searchQuizzes = (userId, searchTerm) => {\n  try {\n    const userQuizzes = getUserQuizzes(userId);\n    const searchLower = searchTerm.toLowerCase();\n    const matchingQuizzes = Object.entries(userQuizzes).filter(([quizId, quiz]) => {\n      var _quiz$title;\n      return (_quiz$title = quiz.title) === null || _quiz$title === void 0 ? void 0 : _quiz$title.toLowerCase().includes(searchLower);\n    });\n    return Object.fromEntries(matchingQuizzes);\n  } catch (error) {\n    console.error('Error searching quizzes:', error);\n    return {};\n  }\n};\n\n// Export all user data (for backup)\nexport const exportUserData = userId => {\n  try {\n    const userQuizzes = getUserQuizzes(userId);\n    const stats = getQuizStats(userId);\n    return {\n      userId,\n      exportDate: new Date().toISOString(),\n      quizzes: userQuizzes,\n      stats\n    };\n  } catch (error) {\n    console.error('Error exporting user data:', error);\n    return null;\n  }\n};\n\n// Import user data (for restore)\nexport const importUserData = (userId, userData) => {\n  try {\n    const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\n    allQuizzes[userId] = userData.quizzes;\n    localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\n    console.log('User data imported successfully');\n    return true;\n  } catch (error) {\n    console.error('Error importing user data:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["QUIZ_STORAGE_KEY","QUIZ_HISTORY_KEY","getUserQuizzes","userId","allQuizzes","JSON","parse","localStorage","getItem","error","console","saveQuiz","quizId","quizData","quizWithMetadata","id","savedAt","Date","toISOString","lastUsed","timesUsed","setItem","stringify","log","deleteQuiz","updateQuizUsage","getQuizStats","userQuizzes","quizzes","Object","values","totalQuizzes","length","totalQuestions","reduce","sum","quiz","_quiz$questions","questions","mostUsedQuiz","max","recentQuizzes","sort","a","b","slice","searchQuizzes","searchTerm","searchLower","toLowerCase","matchingQuizzes","entries","filter","_quiz$title","title","includes","fromEntries","exportUserData","stats","exportDate","importUserData","userData"],"sources":["C:/Users/ACER/Desktop/quiz app/src/utils/quizDatabase.js"],"sourcesContent":["// Quiz Database utility functions using localStorage\r\n// This provides persistent storage for user quizzes\r\n\r\nconst QUIZ_STORAGE_KEY = 'quiz_app_user_quizzes';\r\nconst QUIZ_HISTORY_KEY = 'quiz_app_quiz_history';\r\n\r\n// Get all saved quizzes for a user\r\nexport const getUserQuizzes = (userId) => {\r\n    try {\r\n        const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n        return allQuizzes[userId] || {};\r\n    } catch (error) {\r\n        console.error('Error reading user quizzes:', error);\r\n        return {};\r\n    }\r\n};\r\n\r\n// Save a quiz for a user\r\nexport const saveQuiz = (userId, quizId, quizData) => {\r\n    try {\r\n        const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n        \r\n        if (!allQuizzes[userId]) {\r\n            allQuizzes[userId] = {};\r\n        }\r\n        \r\n        // Add metadata\r\n        const quizWithMetadata = {\r\n            ...quizData,\r\n            id: quizId,\r\n            savedAt: new Date().toISOString(),\r\n            lastUsed: new Date().toISOString(),\r\n            timesUsed: 0\r\n        };\r\n        \r\n        allQuizzes[userId][quizId] = quizWithMetadata;\r\n        localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n        \r\n        console.log('Quiz saved to database:', quizId);\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error saving quiz:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// Delete a quiz\r\nexport const deleteQuiz = (userId, quizId) => {\r\n    try {\r\n        const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n        \r\n        if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\r\n            delete allQuizzes[userId][quizId];\r\n            localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n            console.log('Quiz deleted from database:', quizId);\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    } catch (error) {\r\n        console.error('Error deleting quiz:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// Update quiz usage (when someone starts the quiz)\r\nexport const updateQuizUsage = (userId, quizId) => {\r\n    try {\r\n        const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n        \r\n        if (allQuizzes[userId] && allQuizzes[userId][quizId]) {\r\n            allQuizzes[userId][quizId].lastUsed = new Date().toISOString();\r\n            allQuizzes[userId][quizId].timesUsed = (allQuizzes[userId][quizId].timesUsed || 0) + 1;\r\n            localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    } catch (error) {\r\n        console.error('Error updating quiz usage:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// Get quiz statistics\r\nexport const getQuizStats = (userId) => {\r\n    try {\r\n        const userQuizzes = getUserQuizzes(userId);\r\n        const quizzes = Object.values(userQuizzes);\r\n        \r\n        return {\r\n            totalQuizzes: quizzes.length,\r\n            totalQuestions: quizzes.reduce((sum, quiz) => sum + (quiz.questions?.length || 0), 0),\r\n            mostUsedQuiz: quizzes.reduce((max, quiz) => \r\n                (quiz.timesUsed || 0) > (max.timesUsed || 0) ? quiz : max, \r\n                quizzes[0] || null\r\n            ),\r\n            recentQuizzes: quizzes\r\n                .sort((a, b) => new Date(b.lastUsed) - new Date(a.lastUsed))\r\n                .slice(0, 5)\r\n        };\r\n    } catch (error) {\r\n        console.error('Error getting quiz stats:', error);\r\n        return {\r\n            totalQuizzes: 0,\r\n            totalQuestions: 0,\r\n            mostUsedQuiz: null,\r\n            recentQuizzes: []\r\n        };\r\n    }\r\n};\r\n\r\n// Search quizzes by title\r\nexport const searchQuizzes = (userId, searchTerm) => {\r\n    try {\r\n        const userQuizzes = getUserQuizzes(userId);\r\n        const searchLower = searchTerm.toLowerCase();\r\n        \r\n        const matchingQuizzes = Object.entries(userQuizzes).filter(([quizId, quiz]) => \r\n            quiz.title?.toLowerCase().includes(searchLower)\r\n        );\r\n        \r\n        return Object.fromEntries(matchingQuizzes);\r\n    } catch (error) {\r\n        console.error('Error searching quizzes:', error);\r\n        return {};\r\n    }\r\n};\r\n\r\n// Export all user data (for backup)\r\nexport const exportUserData = (userId) => {\r\n    try {\r\n        const userQuizzes = getUserQuizzes(userId);\r\n        const stats = getQuizStats(userId);\r\n        \r\n        return {\r\n            userId,\r\n            exportDate: new Date().toISOString(),\r\n            quizzes: userQuizzes,\r\n            stats\r\n        };\r\n    } catch (error) {\r\n        console.error('Error exporting user data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Import user data (for restore)\r\nexport const importUserData = (userId, userData) => {\r\n    try {\r\n        const allQuizzes = JSON.parse(localStorage.getItem(QUIZ_STORAGE_KEY) || '{}');\r\n        allQuizzes[userId] = userData.quizzes;\r\n        localStorage.setItem(QUIZ_STORAGE_KEY, JSON.stringify(allQuizzes));\r\n        \r\n        console.log('User data imported successfully');\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error importing user data:', error);\r\n        return false;\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,gBAAgB,GAAG,uBAAuB;AAChD,MAAMC,gBAAgB,GAAG,uBAAuB;;AAEhD;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACtC,IAAI;IACA,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACR,gBAAgB,CAAC,IAAI,IAAI,CAAC;IAC7E,OAAOI,UAAU,CAACD,MAAM,CAAC,IAAI,CAAC,CAAC;EACnC,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,CAAC,CAAC;EACb;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAGA,CAACR,MAAM,EAAES,MAAM,EAAEC,QAAQ,KAAK;EAClD,IAAI;IACA,MAAMT,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACR,gBAAgB,CAAC,IAAI,IAAI,CAAC;IAE7E,IAAI,CAACI,UAAU,CAACD,MAAM,CAAC,EAAE;MACrBC,UAAU,CAACD,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3B;;IAEA;IACA,MAAMW,gBAAgB,GAAG;MACrB,GAAGD,QAAQ;MACXE,EAAE,EAAEH,MAAM;MACVI,OAAO,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACjCC,QAAQ,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAClCE,SAAS,EAAE;IACf,CAAC;IAEDhB,UAAU,CAACD,MAAM,CAAC,CAACS,MAAM,CAAC,GAAGE,gBAAgB;IAC7CP,YAAY,CAACc,OAAO,CAACrB,gBAAgB,EAAEK,IAAI,CAACiB,SAAS,CAAClB,UAAU,CAAC,CAAC;IAElEM,OAAO,CAACa,GAAG,CAAC,yBAAyB,EAAEX,MAAM,CAAC;IAC9C,OAAO,IAAI;EACf,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAO,KAAK;EAChB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMe,UAAU,GAAGA,CAACrB,MAAM,EAAES,MAAM,KAAK;EAC1C,IAAI;IACA,MAAMR,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACR,gBAAgB,CAAC,IAAI,IAAI,CAAC;IAE7E,IAAII,UAAU,CAACD,MAAM,CAAC,IAAIC,UAAU,CAACD,MAAM,CAAC,CAACS,MAAM,CAAC,EAAE;MAClD,OAAOR,UAAU,CAACD,MAAM,CAAC,CAACS,MAAM,CAAC;MACjCL,YAAY,CAACc,OAAO,CAACrB,gBAAgB,EAAEK,IAAI,CAACiB,SAAS,CAAClB,UAAU,CAAC,CAAC;MAClEM,OAAO,CAACa,GAAG,CAAC,6BAA6B,EAAEX,MAAM,CAAC;MAClD,OAAO,IAAI;IACf;IAEA,OAAO,KAAK;EAChB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,KAAK;EAChB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMgB,eAAe,GAAGA,CAACtB,MAAM,EAAES,MAAM,KAAK;EAC/C,IAAI;IACA,MAAMR,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACR,gBAAgB,CAAC,IAAI,IAAI,CAAC;IAE7E,IAAII,UAAU,CAACD,MAAM,CAAC,IAAIC,UAAU,CAACD,MAAM,CAAC,CAACS,MAAM,CAAC,EAAE;MAClDR,UAAU,CAACD,MAAM,CAAC,CAACS,MAAM,CAAC,CAACO,QAAQ,GAAG,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC9Dd,UAAU,CAACD,MAAM,CAAC,CAACS,MAAM,CAAC,CAACQ,SAAS,GAAG,CAAChB,UAAU,CAACD,MAAM,CAAC,CAACS,MAAM,CAAC,CAACQ,SAAS,IAAI,CAAC,IAAI,CAAC;MACtFb,YAAY,CAACc,OAAO,CAACrB,gBAAgB,EAAEK,IAAI,CAACiB,SAAS,CAAClB,UAAU,CAAC,CAAC;MAClE,OAAO,IAAI;IACf;IAEA,OAAO,KAAK;EAChB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,KAAK;EAChB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMiB,YAAY,GAAIvB,MAAM,IAAK;EACpC,IAAI;IACA,MAAMwB,WAAW,GAAGzB,cAAc,CAACC,MAAM,CAAC;IAC1C,MAAMyB,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACH,WAAW,CAAC;IAE1C,OAAO;MACHI,YAAY,EAAEH,OAAO,CAACI,MAAM;MAC5BC,cAAc,EAAEL,OAAO,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI;QAAA,IAAAC,eAAA;QAAA,OAAKF,GAAG,IAAI,EAAAE,eAAA,GAAAD,IAAI,CAACE,SAAS,cAAAD,eAAA,uBAAdA,eAAA,CAAgBL,MAAM,KAAI,CAAC,CAAC;MAAA,GAAE,CAAC,CAAC;MACrFO,YAAY,EAAEX,OAAO,CAACM,MAAM,CAAC,CAACM,GAAG,EAAEJ,IAAI,KACnC,CAACA,IAAI,CAAChB,SAAS,IAAI,CAAC,KAAKoB,GAAG,CAACpB,SAAS,IAAI,CAAC,CAAC,GAAGgB,IAAI,GAAGI,GAAG,EACzDZ,OAAO,CAAC,CAAC,CAAC,IAAI,IAClB,CAAC;MACDa,aAAa,EAAEb,OAAO,CACjBc,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAI3B,IAAI,CAAC2B,CAAC,CAACzB,QAAQ,CAAC,GAAG,IAAIF,IAAI,CAAC0B,CAAC,CAACxB,QAAQ,CAAC,CAAC,CAC3D0B,KAAK,CAAC,CAAC,EAAE,CAAC;IACnB,CAAC;EACL,CAAC,CAAC,OAAOpC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO;MACHsB,YAAY,EAAE,CAAC;MACfE,cAAc,EAAE,CAAC;MACjBM,YAAY,EAAE,IAAI;MAClBE,aAAa,EAAE;IACnB,CAAC;EACL;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,aAAa,GAAGA,CAAC3C,MAAM,EAAE4C,UAAU,KAAK;EACjD,IAAI;IACA,MAAMpB,WAAW,GAAGzB,cAAc,CAACC,MAAM,CAAC;IAC1C,MAAM6C,WAAW,GAAGD,UAAU,CAACE,WAAW,CAAC,CAAC;IAE5C,MAAMC,eAAe,GAAGrB,MAAM,CAACsB,OAAO,CAACxB,WAAW,CAAC,CAACyB,MAAM,CAAC,CAAC,CAACxC,MAAM,EAAEwB,IAAI,CAAC;MAAA,IAAAiB,WAAA;MAAA,QAAAA,WAAA,GACtEjB,IAAI,CAACkB,KAAK,cAAAD,WAAA,uBAAVA,WAAA,CAAYJ,WAAW,CAAC,CAAC,CAACM,QAAQ,CAACP,WAAW,CAAC;IAAA,CACnD,CAAC;IAED,OAAOnB,MAAM,CAAC2B,WAAW,CAACN,eAAe,CAAC;EAC9C,CAAC,CAAC,OAAOzC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,CAAC,CAAC;EACb;AACJ,CAAC;;AAED;AACA,OAAO,MAAMgD,cAAc,GAAItD,MAAM,IAAK;EACtC,IAAI;IACA,MAAMwB,WAAW,GAAGzB,cAAc,CAACC,MAAM,CAAC;IAC1C,MAAMuD,KAAK,GAAGhC,YAAY,CAACvB,MAAM,CAAC;IAElC,OAAO;MACHA,MAAM;MACNwD,UAAU,EAAE,IAAI1C,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACpCU,OAAO,EAAED,WAAW;MACpB+B;IACJ,CAAC;EACL,CAAC,CAAC,OAAOjD,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMmD,cAAc,GAAGA,CAACzD,MAAM,EAAE0D,QAAQ,KAAK;EAChD,IAAI;IACA,MAAMzD,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACR,gBAAgB,CAAC,IAAI,IAAI,CAAC;IAC7EI,UAAU,CAACD,MAAM,CAAC,GAAG0D,QAAQ,CAACjC,OAAO;IACrCrB,YAAY,CAACc,OAAO,CAACrB,gBAAgB,EAAEK,IAAI,CAACiB,SAAS,CAAClB,UAAU,CAAC,CAAC;IAElEM,OAAO,CAACa,GAAG,CAAC,iCAAiC,CAAC;IAC9C,OAAO,IAAI;EACf,CAAC,CAAC,OAAOd,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,KAAK;EAChB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}