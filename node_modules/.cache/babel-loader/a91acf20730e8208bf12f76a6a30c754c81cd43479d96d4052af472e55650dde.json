{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\quiz app\\\\src\\\\views\\\\QuizView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n// Firebase imports removed for local/demo mode\n// import { db, appId } from '../firebase/config';\n// import { doc, setDoc, getDoc, collection, getDocs, updateDoc } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuizView = ({\n  quiz,\n  userId,\n  quizCode,\n  currentQuestionIndex,\n  selectedAnswer,\n  setSelectedAnswer,\n  setCurrentQuiz,\n  setView,\n  setQuizResults,\n  setCurrentQuestionIndex,\n  setLocalQuizzes,\n  localQuizzes,\n  playerName,\n  userAnswers,\n  setUserAnswers\n}) => {\n  _s();\n  const isHost = (quiz === null || quiz === void 0 ? void 0 : quiz.createdBy) === userId;\n  const [shuffledQuiz, setShuffledQuiz] = useState(null);\n  const [originalAnswerMapping, setOriginalAnswerMapping] = useState({});\n\n  // Fisher-Yates shuffle algorithm\n  const shuffleArray = array => {\n    const shuffled = [...array];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n  };\n\n  // Shuffle questions and options based on quiz settings\n  const createShuffledQuiz = originalQuiz => {\n    if (!originalQuiz || !originalQuiz.questions) return originalQuiz;\n    let questionsToUse = [...originalQuiz.questions];\n    let newAnswerMapping = {};\n\n    // Shuffle questions if enabled\n    if (originalQuiz.shuffleQuestions) {\n      questionsToUse = shuffleArray(questionsToUse);\n    }\n\n    // Shuffle options within each question if enabled\n    if (originalQuiz.shuffleOptions) {\n      questionsToUse = questionsToUse.map((question, questionIndex) => {\n        if (!question.options || question.options.length <= 1) {\n          newAnswerMapping[questionIndex] = question.correctAnswer;\n          return question;\n        }\n        const optionsWithIndex = question.options.map((option, index) => ({\n          option,\n          originalIndex: index\n        }));\n        const shuffledOptions = shuffleArray(optionsWithIndex);\n        const newCorrectAnswerIndex = shuffledOptions.findIndex(item => item.originalIndex === question.correctAnswer);\n        newAnswerMapping[questionIndex] = newCorrectAnswerIndex;\n        return {\n          ...question,\n          options: shuffledOptions.map(item => item.option),\n          correctAnswer: newCorrectAnswerIndex\n        };\n      });\n    } else {\n      // Keep original answer mapping if options aren't shuffled\n      questionsToUse.forEach((question, index) => {\n        newAnswerMapping[index] = question.correctAnswer;\n      });\n    }\n    setOriginalAnswerMapping(newAnswerMapping);\n    return {\n      ...originalQuiz,\n      questions: questionsToUse\n    };\n  };\n\n  // Initialize shuffled quiz when quiz loads or changes\n  useEffect(() => {\n    if (quiz && !shuffledQuiz) {\n      const shuffled = createShuffledQuiz(quiz);\n      setShuffledQuiz(shuffled);\n    }\n  }, [quiz, shuffledQuiz]);\n  useEffect(() => {\n    setSelectedAnswer(null);\n  }, [currentQuestionIndex, setSelectedAnswer]);\n  if (!shuffledQuiz || shuffledQuiz.status === 'lobby' || !shuffledQuiz.questions || !shuffledQuiz.questions[currentQuestionIndex]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-2xl\",\n      children: \"Waiting for the quiz to start...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this);\n  }\n  const question = shuffledQuiz.questions[currentQuestionIndex];\n  const handleAnswerSubmit = async optionIndex => {\n    setSelectedAnswer(optionIndex);\n\n    // Store the user's answer for score calculation\n    setUserAnswers(prev => ({\n      ...prev,\n      [currentQuestionIndex]: optionIndex\n    }));\n\n    // Handle demo mode and local quizzes - no Firebase operations needed\n    if (quizCode === 'DEMO' || quizCode === 'TEST' || localQuizzes && localQuizzes[quizCode]) {\n      console.log(\"Local/Demo mode: Answer submitted:\", optionIndex);\n      return;\n    }\n\n    // Firebase code disabled for local/demo mode\n    /*\r\n    const quizAnswersRef = collection(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}/answers`);\r\n    const answerDocId = `${userId}_q${currentQuestionIndex}`;\r\n    \r\n    try {\r\n        await setDoc(doc(quizAnswersRef, answerDocId), {\r\n            userId,\r\n            questionIndex: currentQuestionIndex,\r\n            answer: optionIndex,\r\n            timestamp: new Date(),\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error submitting answer:\", error);\r\n    }\r\n    */\n  };\n  const handleNextQuestion = async () => {\n    const nextIndex = currentQuestionIndex + 1;\n\n    // Handle demo mode and local quizzes\n    if (quizCode === 'DEMO' || quizCode === 'TEST' || localQuizzes && localQuizzes[quizCode]) {\n      if (nextIndex < shuffledQuiz.questions.length) {\n        // Update the quiz state locally for demo mode and local quizzes\n        const updatedQuiz = {\n          ...shuffledQuiz,\n          currentQuestionIndex: nextIndex\n        };\n        setCurrentQuiz(updatedQuiz);\n        setCurrentQuestionIndex(nextIndex);\n        setSelectedAnswer(null);\n\n        // If it's a local quiz, update the stored data too\n        if (localQuizzes && localQuizzes[quizCode]) {\n          setLocalQuizzes(prevQuizzes => ({\n            ...prevQuizzes,\n            [quizCode]: updatedQuiz\n          }));\n        }\n        console.log(\"Local/Demo mode: Moving to question\", nextIndex + 1);\n      } else {\n        // Calculate real scores based on user answers using the shuffled quiz\n        let userScore = 0;\n        shuffledQuiz.questions.forEach((question, index) => {\n          if (question.correctAnswer !== undefined && userAnswers[index] === question.correctAnswer) {\n            userScore++;\n          }\n        });\n        const realResults = {\n          scores: [{\n            name: playerName || \"You\",\n            score: userScore\n          }, {\n            name: \"Demo Player 1\",\n            score: Math.floor(Math.random() * shuffledQuiz.questions.length)\n          }, {\n            name: \"Demo Player 2\",\n            score: Math.floor(Math.random() * shuffledQuiz.questions.length)\n          }],\n          totalQuestions: shuffledQuiz.questions.length\n        };\n        realResults.scores.sort((a, b) => b.score - a.score);\n        setQuizResults(realResults);\n        setView('results');\n        console.log(\"Local/Demo mode: Quiz finished, showing results with real scores\");\n      }\n      return;\n    }\n\n    // Firebase code disabled for local/demo mode\n    /*\r\n    if (nextIndex < shuffledQuiz.questions.length) {\r\n        await updateDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`), {\r\n            currentQuestionIndex: nextIndex\r\n        });\r\n    } else {\r\n        await calculateAndShowResults();\r\n    }\r\n    */\n  };\n\n  // Firebase function disabled for local/demo mode\n  /*\r\n  const calculateAndShowResults = async () => {\r\n      const privateQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/users/${quiz.createdBy}/quizzes/${quizCode}`));\r\n      if (!privateQuizDoc.exists()) {\r\n          console.error(\"Could not find original quiz data to calculate results.\");\r\n          return;\r\n      }\r\n      const correctAnswers = privateQuizDoc.data().questions.map(q => q.correctAnswer);\r\n        const answersSnapshot = await getDocs(collection(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}/answers`));\r\n      const submittedAnswers = answersSnapshot.docs.map(d => d.data());\r\n        const publicQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`));\r\n      const players = publicQuizDoc.data().players;\r\n        const scores = players.map(player => {\r\n          const playerScore = submittedAnswers\r\n              .filter(ans => ans.userId === player.id && correctAnswers[ans.questionIndex] === ans.answer)\r\n              .length;\r\n          return { name: player.name, score: playerScore };\r\n      });\r\n        scores.sort((a, b) => b.score - a.score);\r\n        await updateDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`), {\r\n          status: 'finished',\r\n          results: { scores, totalQuestions: quiz.questions.length }\r\n      });\r\n  };\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-3xl mx-auto text-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-800 p-8 rounded-lg shadow-2xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-cyan-400 font-bold\",\n          children: shuffledQuiz.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bg-gray-700 text-white text-sm font-semibold px-3 py-1 rounded-full\",\n          children: [\"Question \", currentQuestionIndex + 1, \"/\", shuffledQuiz.questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center gap-4 mb-4 text-sm text-gray-400\",\n        children: [shuffledQuiz.shuffleQuestions && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bg-blue-600 px-2 py-1 rounded text-xs\",\n          children: \"Questions Shuffled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 25\n        }, this), shuffledQuiz.shuffleOptions && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bg-purple-600 px-2 py-1 rounded text-xs\",\n          children: \"Options Shuffled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-3xl font-bold my-6 min-h-[80px]\",\n        children: question.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n        children: question.options.map((option, index) => {\n          const isSelected = selectedAnswer === index;\n          const isSubmitted = selectedAnswer !== null;\n          let buttonClass = \"bg-gray-700 hover:bg-gray-600\";\n          if (isSubmitted && isSelected) {\n            buttonClass = \"bg-green-500 hover:bg-green-600\"; // Changed from yellow to green\n          } else if (isSubmitted) {\n            buttonClass = \"bg-gray-700 opacity-50\";\n          }\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAnswerSubmit(index),\n            disabled: isSubmitted,\n            className: `w-full text-left p-4 rounded-lg text-lg transition-all duration-200 ${buttonClass} disabled:cursor-not-allowed`,\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), isHost && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-8\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextQuestion,\n          className: \"bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-8 rounded-lg text-lg\",\n          children: currentQuestionIndex === shuffledQuiz.questions.length - 1 ? 'Finish & Show Results' : 'Next Question'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }, this), !isHost && selectedAnswer !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-8 text-gray-400\",\n        children: \"Your answer is submitted. Waiting for the host to proceed...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizView, \"duwNGwKYC6iK3CsFISUVVzo5Bkw=\");\n_c = QuizView;\nvar _c;\n$RefreshReg$(_c, \"QuizView\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","QuizView","quiz","userId","quizCode","currentQuestionIndex","selectedAnswer","setSelectedAnswer","setCurrentQuiz","setView","setQuizResults","setCurrentQuestionIndex","setLocalQuizzes","localQuizzes","playerName","userAnswers","setUserAnswers","_s","isHost","createdBy","shuffledQuiz","setShuffledQuiz","originalAnswerMapping","setOriginalAnswerMapping","shuffleArray","array","shuffled","i","length","j","Math","floor","random","createShuffledQuiz","originalQuiz","questions","questionsToUse","newAnswerMapping","shuffleQuestions","shuffleOptions","map","question","questionIndex","options","correctAnswer","optionsWithIndex","option","index","originalIndex","shuffledOptions","newCorrectAnswerIndex","findIndex","item","forEach","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerSubmit","optionIndex","prev","console","log","handleNextQuestion","nextIndex","updatedQuiz","prevQuizzes","userScore","undefined","realResults","scores","name","score","totalQuestions","sort","a","b","title","text","isSelected","isSubmitted","buttonClass","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/quiz app/src/views/QuizView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n// Firebase imports removed for local/demo mode\r\n// import { db, appId } from '../firebase/config';\r\n// import { doc, setDoc, getDoc, collection, getDocs, updateDoc } from 'firebase/firestore';\r\n\r\nexport const QuizView = ({ quiz, userId, quizCode, currentQuestionIndex, selectedAnswer, setSelectedAnswer, setCurrentQuiz, setView, setQuizResults, setCurrentQuestionIndex, setLocalQuizzes, localQuizzes, playerName, userAnswers, setUserAnswers }) => {\r\n    const isHost = quiz?.createdBy === userId;\r\n    const [shuffledQuiz, setShuffledQuiz] = useState(null);\r\n    const [originalAnswerMapping, setOriginalAnswerMapping] = useState({});\r\n\r\n    // Fisher-Yates shuffle algorithm\r\n    const shuffleArray = (array) => {\r\n        const shuffled = [...array];\r\n        for (let i = shuffled.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n        }\r\n        return shuffled;\r\n    };\r\n\r\n    // Shuffle questions and options based on quiz settings\r\n    const createShuffledQuiz = (originalQuiz) => {\r\n        if (!originalQuiz || !originalQuiz.questions) return originalQuiz;\r\n\r\n        let questionsToUse = [...originalQuiz.questions];\r\n        let newAnswerMapping = {};\r\n\r\n        // Shuffle questions if enabled\r\n        if (originalQuiz.shuffleQuestions) {\r\n            questionsToUse = shuffleArray(questionsToUse);\r\n        }\r\n\r\n        // Shuffle options within each question if enabled\r\n        if (originalQuiz.shuffleOptions) {\r\n            questionsToUse = questionsToUse.map((question, questionIndex) => {\r\n                if (!question.options || question.options.length <= 1) {\r\n                    newAnswerMapping[questionIndex] = question.correctAnswer;\r\n                    return question;\r\n                }\r\n\r\n                const optionsWithIndex = question.options.map((option, index) => ({\r\n                    option,\r\n                    originalIndex: index\r\n                }));\r\n                \r\n                const shuffledOptions = shuffleArray(optionsWithIndex);\r\n                const newCorrectAnswerIndex = shuffledOptions.findIndex(\r\n                    item => item.originalIndex === question.correctAnswer\r\n                );\r\n\r\n                newAnswerMapping[questionIndex] = newCorrectAnswerIndex;\r\n\r\n                return {\r\n                    ...question,\r\n                    options: shuffledOptions.map(item => item.option),\r\n                    correctAnswer: newCorrectAnswerIndex\r\n                };\r\n            });\r\n        } else {\r\n            // Keep original answer mapping if options aren't shuffled\r\n            questionsToUse.forEach((question, index) => {\r\n                newAnswerMapping[index] = question.correctAnswer;\r\n            });\r\n        }\r\n\r\n        setOriginalAnswerMapping(newAnswerMapping);\r\n\r\n        return {\r\n            ...originalQuiz,\r\n            questions: questionsToUse\r\n        };\r\n    };\r\n\r\n    // Initialize shuffled quiz when quiz loads or changes\r\n    useEffect(() => {\r\n        if (quiz && !shuffledQuiz) {\r\n            const shuffled = createShuffledQuiz(quiz);\r\n            setShuffledQuiz(shuffled);\r\n        }\r\n    }, [quiz, shuffledQuiz]);\r\n\r\n    useEffect(() => {\r\n        setSelectedAnswer(null);\r\n    }, [currentQuestionIndex, setSelectedAnswer]);\r\n\r\n    if (!shuffledQuiz || shuffledQuiz.status === 'lobby' || !shuffledQuiz.questions || !shuffledQuiz.questions[currentQuestionIndex]) {\r\n        return <div className=\"text-center text-2xl\">Waiting for the quiz to start...</div>;\r\n    }\r\n    \r\n    const question = shuffledQuiz.questions[currentQuestionIndex];\r\n\r\n    const handleAnswerSubmit = async (optionIndex) => {\r\n        setSelectedAnswer(optionIndex);\r\n        \r\n        // Store the user's answer for score calculation\r\n        setUserAnswers(prev => ({\r\n            ...prev,\r\n            [currentQuestionIndex]: optionIndex\r\n        }));\r\n        \r\n        // Handle demo mode and local quizzes - no Firebase operations needed\r\n        if (quizCode === 'DEMO' || quizCode === 'TEST' || (localQuizzes && localQuizzes[quizCode])) {\r\n            console.log(\"Local/Demo mode: Answer submitted:\", optionIndex);\r\n            return;\r\n        }\r\n        \r\n        // Firebase code disabled for local/demo mode\r\n        /*\r\n        const quizAnswersRef = collection(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}/answers`);\r\n        const answerDocId = `${userId}_q${currentQuestionIndex}`;\r\n        \r\n        try {\r\n            await setDoc(doc(quizAnswersRef, answerDocId), {\r\n                userId,\r\n                questionIndex: currentQuestionIndex,\r\n                answer: optionIndex,\r\n                timestamp: new Date(),\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error submitting answer:\", error);\r\n        }\r\n        */\r\n    };\r\n\r\n    const handleNextQuestion = async () => {\r\n        const nextIndex = currentQuestionIndex + 1;\r\n        \r\n        // Handle demo mode and local quizzes\r\n        if (quizCode === 'DEMO' || quizCode === 'TEST' || (localQuizzes && localQuizzes[quizCode])) {\r\n            if (nextIndex < shuffledQuiz.questions.length) {\r\n                // Update the quiz state locally for demo mode and local quizzes\r\n                const updatedQuiz = { ...shuffledQuiz, currentQuestionIndex: nextIndex };\r\n                setCurrentQuiz(updatedQuiz);\r\n                setCurrentQuestionIndex(nextIndex);\r\n                setSelectedAnswer(null);\r\n                \r\n                // If it's a local quiz, update the stored data too\r\n                if (localQuizzes && localQuizzes[quizCode]) {\r\n                    setLocalQuizzes(prevQuizzes => ({\r\n                        ...prevQuizzes,\r\n                        [quizCode]: updatedQuiz\r\n                    }));\r\n                }\r\n                \r\n                console.log(\"Local/Demo mode: Moving to question\", nextIndex + 1);\r\n            } else {\r\n                // Calculate real scores based on user answers using the shuffled quiz\r\n                let userScore = 0;\r\n                shuffledQuiz.questions.forEach((question, index) => {\r\n                    if (question.correctAnswer !== undefined && userAnswers[index] === question.correctAnswer) {\r\n                        userScore++;\r\n                    }\r\n                });\r\n                \r\n                const realResults = {\r\n                    scores: [\r\n                        { name: playerName || \"You\", score: userScore },\r\n                        { name: \"Demo Player 1\", score: Math.floor(Math.random() * shuffledQuiz.questions.length) },\r\n                        { name: \"Demo Player 2\", score: Math.floor(Math.random() * shuffledQuiz.questions.length) }\r\n                    ],\r\n                    totalQuestions: shuffledQuiz.questions.length\r\n                };\r\n                realResults.scores.sort((a, b) => b.score - a.score);\r\n                setQuizResults(realResults);\r\n                setView('results');\r\n                console.log(\"Local/Demo mode: Quiz finished, showing results with real scores\");\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // Firebase code disabled for local/demo mode\r\n        /*\r\n        if (nextIndex < shuffledQuiz.questions.length) {\r\n            await updateDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`), {\r\n                currentQuestionIndex: nextIndex\r\n            });\r\n        } else {\r\n            await calculateAndShowResults();\r\n        }\r\n        */\r\n    };\r\n    \r\n    // Firebase function disabled for local/demo mode\r\n    /*\r\n    const calculateAndShowResults = async () => {\r\n        const privateQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/users/${quiz.createdBy}/quizzes/${quizCode}`));\r\n        if (!privateQuizDoc.exists()) {\r\n            console.error(\"Could not find original quiz data to calculate results.\");\r\n            return;\r\n        }\r\n        const correctAnswers = privateQuizDoc.data().questions.map(q => q.correctAnswer);\r\n\r\n        const answersSnapshot = await getDocs(collection(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}/answers`));\r\n        const submittedAnswers = answersSnapshot.docs.map(d => d.data());\r\n\r\n        const publicQuizDoc = await getDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`));\r\n        const players = publicQuizDoc.data().players;\r\n\r\n        const scores = players.map(player => {\r\n            const playerScore = submittedAnswers\r\n                .filter(ans => ans.userId === player.id && correctAnswers[ans.questionIndex] === ans.answer)\r\n                .length;\r\n            return { name: player.name, score: playerScore };\r\n        });\r\n\r\n        scores.sort((a, b) => b.score - a.score);\r\n\r\n        await updateDoc(doc(db, `/artifacts/${appId}/public/data/quizzes/${quizCode}`), {\r\n            status: 'finished',\r\n            results: { scores, totalQuestions: quiz.questions.length }\r\n        });\r\n    };\r\n    */\r\n\r\n    return (\r\n        <div className=\"w-full max-w-3xl mx-auto text-center\">\r\n            <div className=\"bg-gray-800 p-8 rounded-lg shadow-2xl\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                    <span className=\"text-cyan-400 font-bold\">{shuffledQuiz.title}</span>\r\n                    <span className=\"bg-gray-700 text-white text-sm font-semibold px-3 py-1 rounded-full\">Question {currentQuestionIndex + 1}/{shuffledQuiz.questions.length}</span>\r\n                </div>\r\n                \r\n                {/* Show shuffle indicators */}\r\n                <div className=\"flex justify-center gap-4 mb-4 text-sm text-gray-400\">\r\n                    {shuffledQuiz.shuffleQuestions && (\r\n                        <span className=\"bg-blue-600 px-2 py-1 rounded text-xs\">Questions Shuffled</span>\r\n                    )}\r\n                    {shuffledQuiz.shuffleOptions && (\r\n                        <span className=\"bg-purple-600 px-2 py-1 rounded text-xs\">Options Shuffled</span>\r\n                    )}\r\n                </div>\r\n                \r\n                <h2 className=\"text-3xl font-bold my-6 min-h-[80px]\">{question.text}</h2>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    {question.options.map((option, index) => {\r\n                        const isSelected = selectedAnswer === index;\r\n                        const isSubmitted = selectedAnswer !== null;\r\n                        \r\n                        let buttonClass = \"bg-gray-700 hover:bg-gray-600\";\r\n                        if (isSubmitted && isSelected) {\r\n                            buttonClass = \"bg-green-500 hover:bg-green-600\"; // Changed from yellow to green\r\n                        } else if (isSubmitted) {\r\n                            buttonClass = \"bg-gray-700 opacity-50\";\r\n                        }\r\n\r\n                        return (\r\n                            <button\r\n                                key={index}\r\n                                onClick={() => handleAnswerSubmit(index)}\r\n                                disabled={isSubmitted}\r\n                                className={`w-full text-left p-4 rounded-lg text-lg transition-all duration-200 ${buttonClass} disabled:cursor-not-allowed`}\r\n                            >\r\n                                {option}\r\n                            </button>\r\n                        );\r\n                    })}\r\n                </div>\r\n                 {isHost && (\r\n                    <div className=\"mt-8\">\r\n                        <button onClick={handleNextQuestion} className=\"bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-8 rounded-lg text-lg\">\r\n                            {currentQuestionIndex === shuffledQuiz.questions.length - 1 ? 'Finish & Show Results' : 'Next Question'}\r\n                        </button>\r\n                    </div>\r\n                )}\r\n                {!isHost && selectedAnswer !== null && (\r\n                    <p className=\"mt-8 text-gray-400\">Your answer is submitted. Waiting for the host to proceed...</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC,MAAM;EAAEC,QAAQ;EAAEC,oBAAoB;EAAEC,cAAc;EAAEC,iBAAiB;EAAEC,cAAc;EAAEC,OAAO;EAAEC,cAAc;EAAEC,uBAAuB;EAAEC,eAAe;EAAEC,YAAY;EAAEC,UAAU;EAAEC,WAAW;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACvP,MAAMC,MAAM,GAAG,CAAAhB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiB,SAAS,MAAKhB,MAAM;EACzC,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACwB,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEtE;EACA,MAAM0B,YAAY,GAAIC,KAAK,IAAK;IAC5B,MAAMC,QAAQ,GAAG,CAAC,GAAGD,KAAK,CAAC;IAC3B,KAAK,IAAIE,CAAC,GAAGD,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAACD,QAAQ,CAACC,CAAC,CAAC,EAAED,QAAQ,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,QAAQ,CAACG,CAAC,CAAC,EAAEH,QAAQ,CAACC,CAAC,CAAC,CAAC;IAC3D;IACA,OAAOD,QAAQ;EACnB,CAAC;;EAED;EACA,MAAMO,kBAAkB,GAAIC,YAAY,IAAK;IACzC,IAAI,CAACA,YAAY,IAAI,CAACA,YAAY,CAACC,SAAS,EAAE,OAAOD,YAAY;IAEjE,IAAIE,cAAc,GAAG,CAAC,GAAGF,YAAY,CAACC,SAAS,CAAC;IAChD,IAAIE,gBAAgB,GAAG,CAAC,CAAC;;IAEzB;IACA,IAAIH,YAAY,CAACI,gBAAgB,EAAE;MAC/BF,cAAc,GAAGZ,YAAY,CAACY,cAAc,CAAC;IACjD;;IAEA;IACA,IAAIF,YAAY,CAACK,cAAc,EAAE;MAC7BH,cAAc,GAAGA,cAAc,CAACI,GAAG,CAAC,CAACC,QAAQ,EAAEC,aAAa,KAAK;QAC7D,IAAI,CAACD,QAAQ,CAACE,OAAO,IAAIF,QAAQ,CAACE,OAAO,CAACf,MAAM,IAAI,CAAC,EAAE;UACnDS,gBAAgB,CAACK,aAAa,CAAC,GAAGD,QAAQ,CAACG,aAAa;UACxD,OAAOH,QAAQ;QACnB;QAEA,MAAMI,gBAAgB,GAAGJ,QAAQ,CAACE,OAAO,CAACH,GAAG,CAAC,CAACM,MAAM,EAAEC,KAAK,MAAM;UAC9DD,MAAM;UACNE,aAAa,EAAED;QACnB,CAAC,CAAC,CAAC;QAEH,MAAME,eAAe,GAAGzB,YAAY,CAACqB,gBAAgB,CAAC;QACtD,MAAMK,qBAAqB,GAAGD,eAAe,CAACE,SAAS,CACnDC,IAAI,IAAIA,IAAI,CAACJ,aAAa,KAAKP,QAAQ,CAACG,aAC5C,CAAC;QAEDP,gBAAgB,CAACK,aAAa,CAAC,GAAGQ,qBAAqB;QAEvD,OAAO;UACH,GAAGT,QAAQ;UACXE,OAAO,EAAEM,eAAe,CAACT,GAAG,CAACY,IAAI,IAAIA,IAAI,CAACN,MAAM,CAAC;UACjDF,aAAa,EAAEM;QACnB,CAAC;MACL,CAAC,CAAC;IACN,CAAC,MAAM;MACH;MACAd,cAAc,CAACiB,OAAO,CAAC,CAACZ,QAAQ,EAAEM,KAAK,KAAK;QACxCV,gBAAgB,CAACU,KAAK,CAAC,GAAGN,QAAQ,CAACG,aAAa;MACpD,CAAC,CAAC;IACN;IAEArB,wBAAwB,CAACc,gBAAgB,CAAC;IAE1C,OAAO;MACH,GAAGH,YAAY;MACfC,SAAS,EAAEC;IACf,CAAC;EACL,CAAC;;EAED;EACAvC,SAAS,CAAC,MAAM;IACZ,IAAIK,IAAI,IAAI,CAACkB,YAAY,EAAE;MACvB,MAAMM,QAAQ,GAAGO,kBAAkB,CAAC/B,IAAI,CAAC;MACzCmB,eAAe,CAACK,QAAQ,CAAC;IAC7B;EACJ,CAAC,EAAE,CAACxB,IAAI,EAAEkB,YAAY,CAAC,CAAC;EAExBvB,SAAS,CAAC,MAAM;IACZU,iBAAiB,CAAC,IAAI,CAAC;EAC3B,CAAC,EAAE,CAACF,oBAAoB,EAAEE,iBAAiB,CAAC,CAAC;EAE7C,IAAI,CAACa,YAAY,IAAIA,YAAY,CAACkC,MAAM,KAAK,OAAO,IAAI,CAAClC,YAAY,CAACe,SAAS,IAAI,CAACf,YAAY,CAACe,SAAS,CAAC9B,oBAAoB,CAAC,EAAE;IAC9H,oBAAOL,OAAA;MAAKuD,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAAC;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACvF;EAEA,MAAMnB,QAAQ,GAAGrB,YAAY,CAACe,SAAS,CAAC9B,oBAAoB,CAAC;EAE7D,MAAMwD,kBAAkB,GAAG,MAAOC,WAAW,IAAK;IAC9CvD,iBAAiB,CAACuD,WAAW,CAAC;;IAE9B;IACA9C,cAAc,CAAC+C,IAAI,KAAK;MACpB,GAAGA,IAAI;MACP,CAAC1D,oBAAoB,GAAGyD;IAC5B,CAAC,CAAC,CAAC;;IAEH;IACA,IAAI1D,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,MAAM,IAAKS,YAAY,IAAIA,YAAY,CAACT,QAAQ,CAAE,EAAE;MACxF4D,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEH,WAAW,CAAC;MAC9D;IACJ;;IAEA;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC;EAED,MAAMI,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMC,SAAS,GAAG9D,oBAAoB,GAAG,CAAC;;IAE1C;IACA,IAAID,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,MAAM,IAAKS,YAAY,IAAIA,YAAY,CAACT,QAAQ,CAAE,EAAE;MACxF,IAAI+D,SAAS,GAAG/C,YAAY,CAACe,SAAS,CAACP,MAAM,EAAE;QAC3C;QACA,MAAMwC,WAAW,GAAG;UAAE,GAAGhD,YAAY;UAAEf,oBAAoB,EAAE8D;QAAU,CAAC;QACxE3D,cAAc,CAAC4D,WAAW,CAAC;QAC3BzD,uBAAuB,CAACwD,SAAS,CAAC;QAClC5D,iBAAiB,CAAC,IAAI,CAAC;;QAEvB;QACA,IAAIM,YAAY,IAAIA,YAAY,CAACT,QAAQ,CAAC,EAAE;UACxCQ,eAAe,CAACyD,WAAW,KAAK;YAC5B,GAAGA,WAAW;YACd,CAACjE,QAAQ,GAAGgE;UAChB,CAAC,CAAC,CAAC;QACP;QAEAJ,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEE,SAAS,GAAG,CAAC,CAAC;MACrE,CAAC,MAAM;QACH;QACA,IAAIG,SAAS,GAAG,CAAC;QACjBlD,YAAY,CAACe,SAAS,CAACkB,OAAO,CAAC,CAACZ,QAAQ,EAAEM,KAAK,KAAK;UAChD,IAAIN,QAAQ,CAACG,aAAa,KAAK2B,SAAS,IAAIxD,WAAW,CAACgC,KAAK,CAAC,KAAKN,QAAQ,CAACG,aAAa,EAAE;YACvF0B,SAAS,EAAE;UACf;QACJ,CAAC,CAAC;QAEF,MAAME,WAAW,GAAG;UAChBC,MAAM,EAAE,CACJ;YAAEC,IAAI,EAAE5D,UAAU,IAAI,KAAK;YAAE6D,KAAK,EAAEL;UAAU,CAAC,EAC/C;YAAEI,IAAI,EAAE,eAAe;YAAEC,KAAK,EAAE7C,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGZ,YAAY,CAACe,SAAS,CAACP,MAAM;UAAE,CAAC,EAC3F;YAAE8C,IAAI,EAAE,eAAe;YAAEC,KAAK,EAAE7C,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGZ,YAAY,CAACe,SAAS,CAACP,MAAM;UAAE,CAAC,CAC9F;UACDgD,cAAc,EAAExD,YAAY,CAACe,SAAS,CAACP;QAC3C,CAAC;QACD4C,WAAW,CAACC,MAAM,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACJ,KAAK,GAAGG,CAAC,CAACH,KAAK,CAAC;QACpDjE,cAAc,CAAC8D,WAAW,CAAC;QAC3B/D,OAAO,CAAC,SAAS,CAAC;QAClBuD,OAAO,CAACC,GAAG,CAAC,kEAAkE,CAAC;MACnF;MACA;IACJ;;IAEA;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC;;EAED;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAOI,oBACIjE,OAAA;IAAKuD,SAAS,EAAC,sCAAsC;IAAAC,QAAA,eACjDxD,OAAA;MAAKuD,SAAS,EAAC,uCAAuC;MAAAC,QAAA,gBAClDxD,OAAA;QAAKuD,SAAS,EAAC,wCAAwC;QAAAC,QAAA,gBACnDxD,OAAA;UAAMuD,SAAS,EAAC,yBAAyB;UAAAC,QAAA,EAAEpC,YAAY,CAAC4D;QAAK;UAAAvB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrE5D,OAAA;UAAMuD,SAAS,EAAC,qEAAqE;UAAAC,QAAA,GAAC,WAAS,EAACnD,oBAAoB,GAAG,CAAC,EAAC,GAAC,EAACe,YAAY,CAACe,SAAS,CAACP,MAAM;QAAA;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/J,CAAC,eAGN5D,OAAA;QAAKuD,SAAS,EAAC,sDAAsD;QAAAC,QAAA,GAChEpC,YAAY,CAACkB,gBAAgB,iBAC1BtC,OAAA;UAAMuD,SAAS,EAAC,uCAAuC;UAAAC,QAAA,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CACnF,EACAxC,YAAY,CAACmB,cAAc,iBACxBvC,OAAA;UAAMuD,SAAS,EAAC,yCAAyC;UAAAC,QAAA,EAAC;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CACnF;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eAEN5D,OAAA;QAAIuD,SAAS,EAAC,sCAAsC;QAAAC,QAAA,EAAEf,QAAQ,CAACwC;MAAI;QAAAxB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACzE5D,OAAA;QAAKuD,SAAS,EAAC,uCAAuC;QAAAC,QAAA,EACjDf,QAAQ,CAACE,OAAO,CAACH,GAAG,CAAC,CAACM,MAAM,EAAEC,KAAK,KAAK;UACrC,MAAMmC,UAAU,GAAG5E,cAAc,KAAKyC,KAAK;UAC3C,MAAMoC,WAAW,GAAG7E,cAAc,KAAK,IAAI;UAE3C,IAAI8E,WAAW,GAAG,+BAA+B;UACjD,IAAID,WAAW,IAAID,UAAU,EAAE;YAC3BE,WAAW,GAAG,iCAAiC,CAAC,CAAC;UACrD,CAAC,MAAM,IAAID,WAAW,EAAE;YACpBC,WAAW,GAAG,wBAAwB;UAC1C;UAEA,oBACIpF,OAAA;YAEIqF,OAAO,EAAEA,CAAA,KAAMxB,kBAAkB,CAACd,KAAK,CAAE;YACzCuC,QAAQ,EAAEH,WAAY;YACtB5B,SAAS,EAAE,uEAAuE6B,WAAW,8BAA+B;YAAA5B,QAAA,EAE3HV;UAAM,GALFC,KAAK;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAMN,CAAC;QAEjB,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,EACJ1C,MAAM,iBACJlB,OAAA;QAAKuD,SAAS,EAAC,MAAM;QAAAC,QAAA,eACjBxD,OAAA;UAAQqF,OAAO,EAAEnB,kBAAmB;UAACX,SAAS,EAAC,iFAAiF;UAAAC,QAAA,EAC3HnD,oBAAoB,KAAKe,YAAY,CAACe,SAAS,CAACP,MAAM,GAAG,CAAC,GAAG,uBAAuB,GAAG;QAAe;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CACR,EACA,CAAC1C,MAAM,IAAIZ,cAAc,KAAK,IAAI,iBAC/BN,OAAA;QAAGuD,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAA4D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACpG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC3C,EAAA,CAzQWhB,QAAQ;AAAAsF,EAAA,GAARtF,QAAQ;AAAA,IAAAsF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}